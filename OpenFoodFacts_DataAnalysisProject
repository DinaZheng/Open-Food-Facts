{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project\n",
    "## OMIS 114\n",
    "## Group 1\n",
    "### Kyle Schryver, Emily Shao, Leo Tse, Dina Zheng"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dataset sourced from: https://www.kaggle.com/openfoodfacts/world-food-facts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import seaborn as sns\n",
    "%pylab inline\n",
    "\n",
    "import sklearn as sk\n",
    "import sklearn.tree as tree\n",
    "from IPython.display import Image  \n",
    "import pydotplus\n",
    "\n",
    "import warnings #suppress all future warning\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dataset - Dataframe 1 (Orignal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"en.openfoodfacts.org.products.tsv\",sep='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cleanup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing columns that are majority NaN, columns that are not useful for our finding purposes, etc."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dataframe 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "44183489"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.isna().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "mostly_na = df2.isna().sum().sort_values(ascending = False).head(130).index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['water-hardness_100g', 'no_nutriments', '-lignoceric-acid_100g',\n",
       "       '-cerotic-acid_100g', '-melissic-acid_100g', 'glycemic-index_100g',\n",
       "       '-elaidic-acid_100g', '-mead-acid_100g', '-erucic-acid_100g',\n",
       "       '-nervonic-acid_100g',\n",
       "       ...\n",
       "       'pnns_groups_2', 'vitamin-a_100g', 'iron_100g', 'vitamin-c_100g',\n",
       "       'calcium_100g', 'trans-fat_100g', 'cholesterol_100g', 'additives_en',\n",
       "       'additives_tags', 'serving_size'],\n",
       "      dtype='object', length=130)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mostly_na"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.drop(columns = mostly_na, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "useless = ['code', 'url', 'creator', 'created_t', 'created_datetime', 'last_modified_t', 'last_modified_datetime']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.drop(columns = useless, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.drop(columns = 'countries_tags', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.drop(columns = 'countries', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.rename(columns = {'countries_en' : 'countries'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.drop(columns= 'brands_tags', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.drop(columns = 'ingredients_that_may_be_from_palm_oil_n', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.drop(columns = ['states', 'states_tags', 'states_en'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2['avg_nutrition_score'] = ((df['nutrition-score-fr_100g'] + df['nutrition-score-uk_100g']) / 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "gcolumns = ['fat_100g', 'saturated-fat_100g',\n",
    "       'carbohydrates_100g', 'sugars_100g', 'fiber_100g', 'proteins_100g',\n",
    "       'salt_100g', 'sodium_100g']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fat_100g: 4\n",
      "saturated-fat_100g: 2\n",
      "carbohydrates_100g: 21\n",
      "sugars_100g: 13\n",
      "fiber_100g: 13\n",
      "proteins_100g: 5\n",
      "salt_100g: 164\n",
      "sodium_100g: 38\n"
     ]
    }
   ],
   "source": [
    "for i in gcolumns:\n",
    "    print(i + \": \" + str(len(df[df[i] > 100])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "dft = df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "indexNames = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in gcolumns:\n",
    "    indexNames = df2[df2[str(i)] > 100].index\n",
    "    dft.drop(indexNames , inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "355824"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dft)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = dft"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1452099"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.isna().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "355824"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DataFrame 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "df3 = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "useless3 = ['code', 'url', 'creator', \\\n",
    "            'created_t', 'created_datetime', 'last_modified_t', 'last_modified_datetime']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.drop(columns = useless3, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.drop(columns = 'countries_tags', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.drop(columns = 'countries', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.rename(columns = {'countries_en' : 'countries'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.drop(columns= 'brands_tags', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.drop(columns = 'ingredients_that_may_be_from_palm_oil_n', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.drop(columns = ['states', 'states_tags', 'states_en'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "gcolumns3 = ['fat_100g', 'saturated-fat_100g',\n",
    "       'carbohydrates_100g', 'sugars_100g', 'fiber_100g', 'proteins_100g',\n",
    "       'salt_100g', 'sodium_100g']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fat_100g: 4\n",
      "saturated-fat_100g: 2\n",
      "carbohydrates_100g: 21\n",
      "sugars_100g: 13\n",
      "fiber_100g: 13\n",
      "proteins_100g: 5\n",
      "salt_100g: 164\n",
      "sodium_100g: 38\n"
     ]
    }
   ],
   "source": [
    "for i in gcolumns3:\n",
    "    print(i + \": \" + str(len(df3[df3[i] > 100])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "dft3 = df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "indexNames = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "356027"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dft3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in gcolumns3:\n",
    "    indexNames = df3[df3[str(i)] > 100].index\n",
    "    dft3.drop(indexNames , inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "355824"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dft3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = dft3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "355824"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dataframe 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4 = pd.read_csv(\"en.openfoodfacts.org.products.tsv\",sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "356027"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['code', 'url', 'creator', 'created_t', 'created_datetime',\n",
       "       'last_modified_t', 'last_modified_datetime', 'product_name',\n",
       "       'generic_name', 'quantity',\n",
       "       ...\n",
       "       'fruits-vegetables-nuts_100g', 'fruits-vegetables-nuts-estimate_100g',\n",
       "       'collagen-meat-protein-ratio_100g', 'cocoa_100g', 'chlorophyl_100g',\n",
       "       'carbon-footprint_100g', 'nutrition-score-fr_100g',\n",
       "       'nutrition-score-uk_100g', 'glycemic-index_100g',\n",
       "       'water-hardness_100g'],\n",
       "      dtype='object', length=163)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>no_nutriments</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>ingredients_from_palm_oil</th>\n",
       "      <th>ingredients_that_may_be_from_palm_oil_n</th>\n",
       "      <th>ingredients_that_may_be_from_palm_oil</th>\n",
       "      <th>nutrition_grade_uk</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>energy-from-fat_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>...</th>\n",
       "      <th>fruits-vegetables-nuts_100g</th>\n",
       "      <th>fruits-vegetables-nuts-estimate_100g</th>\n",
       "      <th>collagen-meat-protein-ratio_100g</th>\n",
       "      <th>cocoa_100g</th>\n",
       "      <th>chlorophyl_100g</th>\n",
       "      <th>carbon-footprint_100g</th>\n",
       "      <th>nutrition-score-fr_100g</th>\n",
       "      <th>nutrition-score-uk_100g</th>\n",
       "      <th>glycemic-index_100g</th>\n",
       "      <th>water-hardness_100g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>0.0</td>\n",
       "      <td>283867.000000</td>\n",
       "      <td>283867.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>283867.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>295367.000000</td>\n",
       "      <td>869.000000</td>\n",
       "      <td>2.794970e+05</td>\n",
       "      <td>...</td>\n",
       "      <td>3228.000000</td>\n",
       "      <td>404.000000</td>\n",
       "      <td>182.000000</td>\n",
       "      <td>1383.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>278.000000</td>\n",
       "      <td>254856.000000</td>\n",
       "      <td>254856.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.876851</td>\n",
       "      <td>0.023430</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.059736</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1125.453320</td>\n",
       "      <td>587.216617</td>\n",
       "      <td>5.606587e+04</td>\n",
       "      <td>...</td>\n",
       "      <td>33.392680</td>\n",
       "      <td>60.360124</td>\n",
       "      <td>15.362637</td>\n",
       "      <td>52.102675</td>\n",
       "      <td>NaN</td>\n",
       "      <td>335.790664</td>\n",
       "      <td>9.166137</td>\n",
       "      <td>8.980656</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.501022</td>\n",
       "      <td>0.153094</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.280660</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>936.825952</td>\n",
       "      <td>713.255708</td>\n",
       "      <td>2.963385e+07</td>\n",
       "      <td>...</td>\n",
       "      <td>32.906834</td>\n",
       "      <td>29.262350</td>\n",
       "      <td>3.692658</td>\n",
       "      <td>19.028361</td>\n",
       "      <td>NaN</td>\n",
       "      <td>423.244817</td>\n",
       "      <td>8.999870</td>\n",
       "      <td>9.151757</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-15.000000</td>\n",
       "      <td>-15.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>382.000000</td>\n",
       "      <td>49.400000</td>\n",
       "      <td>1.000000e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>82.650000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1092.000000</td>\n",
       "      <td>300.000000</td>\n",
       "      <td>5.290000e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>190.950000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1674.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>2.000000e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>378.700000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>231199.000000</td>\n",
       "      <td>3830.000000</td>\n",
       "      <td>1.566667e+10</td>\n",
       "      <td>...</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2842.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 107 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       no_nutriments    additives_n  ingredients_from_palm_oil_n  \\\n",
       "count            0.0  283867.000000                283867.000000   \n",
       "mean             NaN       1.876851                     0.023430   \n",
       "std              NaN       2.501022                     0.153094   \n",
       "min              NaN       0.000000                     0.000000   \n",
       "25%              NaN       0.000000                     0.000000   \n",
       "50%              NaN       1.000000                     0.000000   \n",
       "75%              NaN       3.000000                     0.000000   \n",
       "max              NaN      30.000000                     2.000000   \n",
       "\n",
       "       ingredients_from_palm_oil  ingredients_that_may_be_from_palm_oil_n  \\\n",
       "count                        0.0                            283867.000000   \n",
       "mean                         NaN                                 0.059736   \n",
       "std                          NaN                                 0.280660   \n",
       "min                          NaN                                 0.000000   \n",
       "25%                          NaN                                 0.000000   \n",
       "50%                          NaN                                 0.000000   \n",
       "75%                          NaN                                 0.000000   \n",
       "max                          NaN                                 6.000000   \n",
       "\n",
       "       ingredients_that_may_be_from_palm_oil  nutrition_grade_uk  \\\n",
       "count                                    0.0                 0.0   \n",
       "mean                                     NaN                 NaN   \n",
       "std                                      NaN                 NaN   \n",
       "min                                      NaN                 NaN   \n",
       "25%                                      NaN                 NaN   \n",
       "50%                                      NaN                 NaN   \n",
       "75%                                      NaN                 NaN   \n",
       "max                                      NaN                 NaN   \n",
       "\n",
       "         energy_100g  energy-from-fat_100g      fat_100g  ...  \\\n",
       "count  295367.000000            869.000000  2.794970e+05  ...   \n",
       "mean     1125.453320            587.216617  5.606587e+04  ...   \n",
       "std       936.825952            713.255708  2.963385e+07  ...   \n",
       "min         0.000000              0.000000  0.000000e+00  ...   \n",
       "25%       382.000000             49.400000  1.000000e-01  ...   \n",
       "50%      1092.000000            300.000000  5.290000e+00  ...   \n",
       "75%      1674.000000            900.000000  2.000000e+01  ...   \n",
       "max    231199.000000           3830.000000  1.566667e+10  ...   \n",
       "\n",
       "       fruits-vegetables-nuts_100g  fruits-vegetables-nuts-estimate_100g  \\\n",
       "count                  3228.000000                            404.000000   \n",
       "mean                     33.392680                             60.360124   \n",
       "std                      32.906834                             29.262350   \n",
       "min                       0.000000                              0.000000   \n",
       "25%                       0.000000                             45.000000   \n",
       "50%                      25.000000                             58.000000   \n",
       "75%                      55.000000                             93.000000   \n",
       "max                     100.000000                            100.000000   \n",
       "\n",
       "       collagen-meat-protein-ratio_100g   cocoa_100g  chlorophyl_100g  \\\n",
       "count                        182.000000  1383.000000              0.0   \n",
       "mean                          15.362637    52.102675              NaN   \n",
       "std                            3.692658    19.028361              NaN   \n",
       "min                            8.000000     6.000000              NaN   \n",
       "25%                           12.000000    33.000000              NaN   \n",
       "50%                           15.000000    52.000000              NaN   \n",
       "75%                           15.000000    70.000000              NaN   \n",
       "max                           25.000000   100.000000              NaN   \n",
       "\n",
       "       carbon-footprint_100g  nutrition-score-fr_100g  \\\n",
       "count             278.000000            254856.000000   \n",
       "mean              335.790664                 9.166137   \n",
       "std               423.244817                 8.999870   \n",
       "min                 0.000000               -15.000000   \n",
       "25%                82.650000                 1.000000   \n",
       "50%               190.950000                10.000000   \n",
       "75%               378.700000                16.000000   \n",
       "max              2842.000000                40.000000   \n",
       "\n",
       "       nutrition-score-uk_100g  glycemic-index_100g  water-hardness_100g  \n",
       "count            254856.000000                  0.0                  0.0  \n",
       "mean                  8.980656                  NaN                  NaN  \n",
       "std                   9.151757                  NaN                  NaN  \n",
       "min                 -15.000000                  NaN                  NaN  \n",
       "25%                   1.000000                  NaN                  NaN  \n",
       "50%                   9.000000                  NaN                  NaN  \n",
       "75%                  16.000000                  NaN                  NaN  \n",
       "max                  40.000000                  NaN                  NaN  \n",
       "\n",
       "[8 rows x 107 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "mostly_na = df4.isna().sum().sort_values(ascending = False).head(130).index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['water-hardness_100g', 'no_nutriments', '-lignoceric-acid_100g',\n",
       "       '-cerotic-acid_100g', '-melissic-acid_100g', 'glycemic-index_100g',\n",
       "       '-elaidic-acid_100g', '-mead-acid_100g', '-erucic-acid_100g',\n",
       "       '-nervonic-acid_100g',\n",
       "       ...\n",
       "       'pnns_groups_2', 'vitamin-a_100g', 'iron_100g', 'vitamin-c_100g',\n",
       "       'calcium_100g', 'trans-fat_100g', 'cholesterol_100g', 'additives_en',\n",
       "       'additives_tags', 'serving_size'],\n",
       "      dtype='object', length=130)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mostly_na"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.drop(columns = mostly_na, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "useless = ['code', 'url', 'creator', 'created_t', 'created_datetime', 'last_modified_t', 'last_modified_datetime']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.drop(columns = useless, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.drop(columns = 'countries_tags', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.drop(columns = 'countries', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.rename(columns = {'countries_en' : 'countries'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.drop(columns= 'brands_tags', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>ingredients_that_may_be_from_palm_oil_n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ingredients_from_palm_oil_n  ingredients_that_may_be_from_palm_oil_n\n",
       "0                          NaN                                      NaN\n",
       "1                          0.0                                      0.0\n",
       "2                          0.0                                      0.0\n",
       "3                          0.0                                      0.0\n",
       "4                          0.0                                      0.0\n",
       "5                          0.0                                      0.0\n",
       "6                          0.0                                      0.0\n",
       "7                          0.0                                      0.0\n",
       "8                          0.0                                      0.0\n",
       "9                          0.0                                      0.0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4[['ingredients_from_palm_oil_n', 'ingredients_that_may_be_from_palm_oil_n']].head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.drop(columns = 'ingredients_that_may_be_from_palm_oil_n', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.drop(columns = ['states', 'states_tags', 'states_en'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4['avg_nutrition_score'] = ((df4['nutrition-score-fr_100g'] + df4['nutrition-score-uk_100g']) / 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.drop(columns=['nutrition-score-fr_100g','nutrition-score-uk_100g'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>brands</th>\n",
       "      <th>countries</th>\n",
       "      <th>ingredients_text</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>additives</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>nutrition_grade_fr</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>avg_nutrition_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Farine de blé noir</td>\n",
       "      <td>Ferme t'y R'nao</td>\n",
       "      <td>France</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Banana Chips Sweetened (Whole)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States</td>\n",
       "      <td>Bananas, vegetable oil (coconut oil, corn oil ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ bananas -&gt; en:bananas  ]  [ vegetable-oil -...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>2243.0</td>\n",
       "      <td>28.57</td>\n",
       "      <td>28.57</td>\n",
       "      <td>64.29</td>\n",
       "      <td>14.29</td>\n",
       "      <td>3.6</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Peanuts</td>\n",
       "      <td>Torn &amp; Glasser</td>\n",
       "      <td>United States</td>\n",
       "      <td>Peanuts, wheat flour, sugar, rice flour, tapio...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ peanuts -&gt; en:peanuts  ]  [ wheat-flour -&gt; ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>b</td>\n",
       "      <td>1941.0</td>\n",
       "      <td>17.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>60.71</td>\n",
       "      <td>17.86</td>\n",
       "      <td>7.1</td>\n",
       "      <td>17.86</td>\n",
       "      <td>0.63500</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Organic Salted Nut Mix</td>\n",
       "      <td>Grizzlies</td>\n",
       "      <td>United States</td>\n",
       "      <td>Organic hazelnuts, organic cashews, organic wa...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ organic-hazelnuts -&gt; en:organic-hazelnuts  ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>2540.0</td>\n",
       "      <td>57.14</td>\n",
       "      <td>5.36</td>\n",
       "      <td>17.86</td>\n",
       "      <td>3.57</td>\n",
       "      <td>7.1</td>\n",
       "      <td>17.86</td>\n",
       "      <td>1.22428</td>\n",
       "      <td>0.482</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Organic Polenta</td>\n",
       "      <td>Bob's Red Mill</td>\n",
       "      <td>United States</td>\n",
       "      <td>Organic polenta</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ organic-polenta -&gt; en:organic-polenta  ]  [...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1552.0</td>\n",
       "      <td>1.43</td>\n",
       "      <td>NaN</td>\n",
       "      <td>77.14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.7</td>\n",
       "      <td>8.57</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     product_name           brands      countries  \\\n",
       "0              Farine de blé noir  Ferme t'y R'nao         France   \n",
       "1  Banana Chips Sweetened (Whole)              NaN  United States   \n",
       "2                         Peanuts   Torn & Glasser  United States   \n",
       "3          Organic Salted Nut Mix        Grizzlies  United States   \n",
       "4                 Organic Polenta   Bob's Red Mill  United States   \n",
       "\n",
       "                                    ingredients_text  additives_n  \\\n",
       "0                                                NaN          NaN   \n",
       "1  Bananas, vegetable oil (coconut oil, corn oil ...          0.0   \n",
       "2  Peanuts, wheat flour, sugar, rice flour, tapio...          0.0   \n",
       "3  Organic hazelnuts, organic cashews, organic wa...          0.0   \n",
       "4                                    Organic polenta          0.0   \n",
       "\n",
       "                                           additives  \\\n",
       "0                                                NaN   \n",
       "1   [ bananas -> en:bananas  ]  [ vegetable-oil -...   \n",
       "2   [ peanuts -> en:peanuts  ]  [ wheat-flour -> ...   \n",
       "3   [ organic-hazelnuts -> en:organic-hazelnuts  ...   \n",
       "4   [ organic-polenta -> en:organic-polenta  ]  [...   \n",
       "\n",
       "   ingredients_from_palm_oil_n nutrition_grade_fr  energy_100g  fat_100g  \\\n",
       "0                          NaN                NaN          NaN       NaN   \n",
       "1                          0.0                  d       2243.0     28.57   \n",
       "2                          0.0                  b       1941.0     17.86   \n",
       "3                          0.0                  d       2540.0     57.14   \n",
       "4                          0.0                NaN       1552.0      1.43   \n",
       "\n",
       "   saturated-fat_100g  carbohydrates_100g  sugars_100g  fiber_100g  \\\n",
       "0                 NaN                 NaN          NaN         NaN   \n",
       "1               28.57               64.29        14.29         3.6   \n",
       "2                0.00               60.71        17.86         7.1   \n",
       "3                5.36               17.86         3.57         7.1   \n",
       "4                 NaN               77.14          NaN         5.7   \n",
       "\n",
       "   proteins_100g  salt_100g  sodium_100g  avg_nutrition_score  \n",
       "0            NaN        NaN          NaN                  NaN  \n",
       "1           3.57    0.00000        0.000                 14.0  \n",
       "2          17.86    0.63500        0.250                  0.0  \n",
       "3          17.86    1.22428        0.482                 12.0  \n",
       "4           8.57        NaN          NaN                  NaN  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <font color = blue> Finding #1 - Health Concerns for Consumers and Nutrition </blue>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What foods by themselves exceed the daily sugar limit?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "355824"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "44962"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df2.sugars_100g > 36).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12636022303161112"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "((df2.sugars_100g > 36).sum()) / len(df2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 44962/355824, or 13% exceed the daily sugar limit by themselves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>sugars_100g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>47902</td>\n",
       "      <td>Bob's, Sweet Stripes, Peppermint Soft Mint Candy</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56143</td>\n",
       "      <td>Carousel Candies, Bubble Gum</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74472</td>\n",
       "      <td>Red, Green, Blue, Yellow Sprinkles</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>271978</td>\n",
       "      <td>Sucre Roux de Canne</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>171077</td>\n",
       "      <td>Lollipop Racer</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>129442</td>\n",
       "      <td>Uncle Bill's Foods, Cotton Candy</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>155069</td>\n",
       "      <td>Cotton Candy Cobwebs</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74450</td>\n",
       "      <td>Icing Decorations</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74441</td>\n",
       "      <td>Sprinkles, Peppermint Crunch Menta Crocante</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>331521</td>\n",
       "      <td>Zucchero semolato</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74421</td>\n",
       "      <td>Icing Decorations</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>271977</td>\n",
       "      <td>Sucre de canne Bio</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74381</td>\n",
       "      <td>Nickelodeon, Icing Decorations</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74363</td>\n",
       "      <td>Icing Decorations</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74361</td>\n",
       "      <td>Icing Decoratioins</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>197596</td>\n",
       "      <td>Sucre en morceaux</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>197601</td>\n",
       "      <td>Sucre semoule fine</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>197604</td>\n",
       "      <td>Sucre semoule fine</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>197605</td>\n",
       "      <td>Cassonade pure canne</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>271976</td>\n",
       "      <td>SUCRE CANNE ROUX MORCEAU</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            product_name  sugars_100g\n",
       "47902   Bob's, Sweet Stripes, Peppermint Soft Mint Candy        100.0\n",
       "56143                       Carousel Candies, Bubble Gum        100.0\n",
       "74472                 Red, Green, Blue, Yellow Sprinkles        100.0\n",
       "271978                               Sucre Roux de Canne        100.0\n",
       "171077                                    Lollipop Racer        100.0\n",
       "129442                  Uncle Bill's Foods, Cotton Candy        100.0\n",
       "155069                              Cotton Candy Cobwebs        100.0\n",
       "74450                                  Icing Decorations        100.0\n",
       "74441        Sprinkles, Peppermint Crunch Menta Crocante        100.0\n",
       "331521                                 Zucchero semolato        100.0\n",
       "74421                                  Icing Decorations        100.0\n",
       "271977                                Sucre de canne Bio        100.0\n",
       "74381                     Nickelodeon, Icing Decorations        100.0\n",
       "74363                                  Icing Decorations        100.0\n",
       "74361                                 Icing Decoratioins        100.0\n",
       "197596                                 Sucre en morceaux        100.0\n",
       "197601                                Sucre semoule fine        100.0\n",
       "197604                                Sucre semoule fine        100.0\n",
       "197605                              Cassonade pure canne        100.0\n",
       "271976                          SUCRE CANNE ROUX MORCEAU        100.0"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[(df2.sugars_100g > 36) & (df2.product_name.str.contains('Sugar', regex = False) == False)].sort_values\\\n",
    "(ascending = False, by = 'sugars_100g')[['product_name', 'sugars_100g']].head(20)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Many foods contain extremely large amounts of sugar within just 100g of the food. These would be quite unhealthy for anyone with diabetes and could cause issues for the average person if consumed in excess quantity. As consumers become more health aware, companies should stray away from these types of products, offer them in smaller quantity, or subsitute something for the sugar."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Nutrition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>generic_name</th>\n",
       "      <th>quantity</th>\n",
       "      <th>packaging</th>\n",
       "      <th>packaging_tags</th>\n",
       "      <th>brands</th>\n",
       "      <th>categories</th>\n",
       "      <th>categories_tags</th>\n",
       "      <th>categories_en</th>\n",
       "      <th>origins</th>\n",
       "      <th>...</th>\n",
       "      <th>fruits-vegetables-nuts_100g</th>\n",
       "      <th>fruits-vegetables-nuts-estimate_100g</th>\n",
       "      <th>collagen-meat-protein-ratio_100g</th>\n",
       "      <th>cocoa_100g</th>\n",
       "      <th>chlorophyl_100g</th>\n",
       "      <th>carbon-footprint_100g</th>\n",
       "      <th>nutrition-score-fr_100g</th>\n",
       "      <th>nutrition-score-uk_100g</th>\n",
       "      <th>glycemic-index_100g</th>\n",
       "      <th>water-hardness_100g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Farine de blé noir</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1kg</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ferme t'y R'nao</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Banana Chips Sweetened (Whole)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Peanuts</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Torn &amp; Glasser</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Organic Salted Nut Mix</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Grizzlies</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Organic Polenta</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bob's Red Mill</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 149 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     product_name generic_name quantity packaging  \\\n",
       "0              Farine de blé noir          NaN      1kg       NaN   \n",
       "1  Banana Chips Sweetened (Whole)          NaN      NaN       NaN   \n",
       "2                         Peanuts          NaN      NaN       NaN   \n",
       "3          Organic Salted Nut Mix          NaN      NaN       NaN   \n",
       "4                 Organic Polenta          NaN      NaN       NaN   \n",
       "\n",
       "  packaging_tags           brands categories categories_tags categories_en  \\\n",
       "0            NaN  Ferme t'y R'nao        NaN             NaN           NaN   \n",
       "1            NaN              NaN        NaN             NaN           NaN   \n",
       "2            NaN   Torn & Glasser        NaN             NaN           NaN   \n",
       "3            NaN        Grizzlies        NaN             NaN           NaN   \n",
       "4            NaN   Bob's Red Mill        NaN             NaN           NaN   \n",
       "\n",
       "  origins  ... fruits-vegetables-nuts_100g  \\\n",
       "0     NaN  ...                         NaN   \n",
       "1     NaN  ...                         NaN   \n",
       "2     NaN  ...                         NaN   \n",
       "3     NaN  ...                         NaN   \n",
       "4     NaN  ...                         NaN   \n",
       "\n",
       "  fruits-vegetables-nuts-estimate_100g collagen-meat-protein-ratio_100g  \\\n",
       "0                                  NaN                              NaN   \n",
       "1                                  NaN                              NaN   \n",
       "2                                  NaN                              NaN   \n",
       "3                                  NaN                              NaN   \n",
       "4                                  NaN                              NaN   \n",
       "\n",
       "  cocoa_100g chlorophyl_100g carbon-footprint_100g nutrition-score-fr_100g  \\\n",
       "0        NaN             NaN                   NaN                     NaN   \n",
       "1        NaN             NaN                   NaN                    14.0   \n",
       "2        NaN             NaN                   NaN                     0.0   \n",
       "3        NaN             NaN                   NaN                    12.0   \n",
       "4        NaN             NaN                   NaN                     NaN   \n",
       "\n",
       "  nutrition-score-uk_100g glycemic-index_100g water-hardness_100g  \n",
       "0                     NaN                 NaN                 NaN  \n",
       "1                    14.0                 NaN                 NaN  \n",
       "2                     0.0                 NaN                 NaN  \n",
       "3                    12.0                 NaN                 NaN  \n",
       "4                     NaN                 NaN                 NaN  \n",
       "\n",
       "[5 rows x 149 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.dropna(thresh = 50, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.fillna(0, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2014"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7940"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[df.countries.str.contains(\",\") == True])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "comma = df3[df3.countries.str.contains(\",\") == True].index\n",
    "df3.drop(comma, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "163"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['code', 'url', 'creator', 'created_t', 'created_datetime',\n",
       "       'last_modified_t', 'last_modified_datetime', 'product_name',\n",
       "       'generic_name', 'quantity', 'packaging', 'packaging_tags',\n",
       "       'brands', 'brands_tags', 'categories', 'categories_tags',\n",
       "       'categories_en', 'origins', 'origins_tags', 'manufacturing_places',\n",
       "       'manufacturing_places_tags', 'labels', 'labels_tags', 'labels_en',\n",
       "       'emb_codes', 'emb_codes_tags', 'first_packaging_code_geo',\n",
       "       'cities', 'cities_tags', 'purchase_places', 'stores', 'countries',\n",
       "       'countries_tags', 'countries_en', 'ingredients_text', 'allergens',\n",
       "       'allergens_en', 'traces', 'traces_tags', 'traces_en',\n",
       "       'serving_size', 'no_nutriments', 'additives_n', 'additives',\n",
       "       'additives_tags', 'additives_en', 'ingredients_from_palm_oil_n',\n",
       "       'ingredients_from_palm_oil', 'ingredients_from_palm_oil_tags',\n",
       "       'ingredients_that_may_be_from_palm_oil_n',\n",
       "       'ingredients_that_may_be_from_palm_oil',\n",
       "       'ingredients_that_may_be_from_palm_oil_tags', 'nutrition_grade_uk',\n",
       "       'nutrition_grade_fr', 'pnns_groups_1', 'pnns_groups_2', 'states',\n",
       "       'states_tags', 'states_en', 'main_category', 'main_category_en',\n",
       "       'image_url', 'image_small_url', 'energy_100g',\n",
       "       'energy-from-fat_100g', 'fat_100g', 'saturated-fat_100g',\n",
       "       '-butyric-acid_100g', '-caproic-acid_100g', '-caprylic-acid_100g',\n",
       "       '-capric-acid_100g', '-lauric-acid_100g', '-myristic-acid_100g',\n",
       "       '-palmitic-acid_100g', '-stearic-acid_100g',\n",
       "       '-arachidic-acid_100g', '-behenic-acid_100g',\n",
       "       '-lignoceric-acid_100g', '-cerotic-acid_100g',\n",
       "       '-montanic-acid_100g', '-melissic-acid_100g',\n",
       "       'monounsaturated-fat_100g', 'polyunsaturated-fat_100g',\n",
       "       'omega-3-fat_100g', '-alpha-linolenic-acid_100g',\n",
       "       '-eicosapentaenoic-acid_100g', '-docosahexaenoic-acid_100g',\n",
       "       'omega-6-fat_100g', '-linoleic-acid_100g',\n",
       "       '-arachidonic-acid_100g', '-gamma-linolenic-acid_100g',\n",
       "       '-dihomo-gamma-linolenic-acid_100g', 'omega-9-fat_100g',\n",
       "       '-oleic-acid_100g', '-elaidic-acid_100g', '-gondoic-acid_100g',\n",
       "       '-mead-acid_100g', '-erucic-acid_100g', '-nervonic-acid_100g',\n",
       "       'trans-fat_100g', 'cholesterol_100g', 'carbohydrates_100g',\n",
       "       'sugars_100g', '-sucrose_100g', '-glucose_100g', '-fructose_100g',\n",
       "       '-lactose_100g', '-maltose_100g', '-maltodextrins_100g',\n",
       "       'starch_100g', 'polyols_100g', 'fiber_100g', 'proteins_100g',\n",
       "       'casein_100g', 'serum-proteins_100g', 'nucleotides_100g',\n",
       "       'salt_100g', 'sodium_100g', 'alcohol_100g', 'vitamin-a_100g',\n",
       "       'beta-carotene_100g', 'vitamin-d_100g', 'vitamin-e_100g',\n",
       "       'vitamin-k_100g', 'vitamin-c_100g', 'vitamin-b1_100g',\n",
       "       'vitamin-b2_100g', 'vitamin-pp_100g', 'vitamin-b6_100g',\n",
       "       'vitamin-b9_100g', 'folates_100g', 'vitamin-b12_100g',\n",
       "       'biotin_100g', 'pantothenic-acid_100g', 'silica_100g',\n",
       "       'bicarbonate_100g', 'potassium_100g', 'chloride_100g',\n",
       "       'calcium_100g', 'phosphorus_100g', 'iron_100g', 'magnesium_100g',\n",
       "       'zinc_100g', 'copper_100g', 'manganese_100g', 'fluoride_100g',\n",
       "       'selenium_100g', 'chromium_100g', 'molybdenum_100g', 'iodine_100g',\n",
       "       'caffeine_100g', 'taurine_100g', 'ph_100g',\n",
       "       'fruits-vegetables-nuts_100g',\n",
       "       'fruits-vegetables-nuts-estimate_100g',\n",
       "       'collagen-meat-protein-ratio_100g', 'cocoa_100g',\n",
       "       'chlorophyl_100g', 'carbon-footprint_100g',\n",
       "       'nutrition-score-fr_100g', 'nutrition-score-uk_100g',\n",
       "       'glycemic-index_100g', 'water-hardness_100g'], dtype=object)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns.values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://help.whisk.com/en/articles/2238011-nutrition-calculations-macronutrients-micronutrients-and-health-score\n",
    "\n",
    "https://www.ewg.org/foodscores/content/methodology-nutrition/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns', 500)\n",
    "pd.set_option('display.width', 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cities</th>\n",
       "      <th>allergens_en</th>\n",
       "      <th>no_nutriments</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>ingredients_from_palm_oil</th>\n",
       "      <th>ingredients_that_may_be_from_palm_oil</th>\n",
       "      <th>nutrition_grade_uk</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>energy-from-fat_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>-butyric-acid_100g</th>\n",
       "      <th>-caproic-acid_100g</th>\n",
       "      <th>-caprylic-acid_100g</th>\n",
       "      <th>-capric-acid_100g</th>\n",
       "      <th>-lauric-acid_100g</th>\n",
       "      <th>-myristic-acid_100g</th>\n",
       "      <th>-palmitic-acid_100g</th>\n",
       "      <th>-stearic-acid_100g</th>\n",
       "      <th>-arachidic-acid_100g</th>\n",
       "      <th>-behenic-acid_100g</th>\n",
       "      <th>-lignoceric-acid_100g</th>\n",
       "      <th>-cerotic-acid_100g</th>\n",
       "      <th>-montanic-acid_100g</th>\n",
       "      <th>-melissic-acid_100g</th>\n",
       "      <th>monounsaturated-fat_100g</th>\n",
       "      <th>polyunsaturated-fat_100g</th>\n",
       "      <th>omega-3-fat_100g</th>\n",
       "      <th>-alpha-linolenic-acid_100g</th>\n",
       "      <th>-eicosapentaenoic-acid_100g</th>\n",
       "      <th>-docosahexaenoic-acid_100g</th>\n",
       "      <th>omega-6-fat_100g</th>\n",
       "      <th>-linoleic-acid_100g</th>\n",
       "      <th>-arachidonic-acid_100g</th>\n",
       "      <th>-gamma-linolenic-acid_100g</th>\n",
       "      <th>-dihomo-gamma-linolenic-acid_100g</th>\n",
       "      <th>omega-9-fat_100g</th>\n",
       "      <th>-oleic-acid_100g</th>\n",
       "      <th>-elaidic-acid_100g</th>\n",
       "      <th>-gondoic-acid_100g</th>\n",
       "      <th>-mead-acid_100g</th>\n",
       "      <th>-erucic-acid_100g</th>\n",
       "      <th>-nervonic-acid_100g</th>\n",
       "      <th>trans-fat_100g</th>\n",
       "      <th>cholesterol_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>-sucrose_100g</th>\n",
       "      <th>-glucose_100g</th>\n",
       "      <th>-fructose_100g</th>\n",
       "      <th>-lactose_100g</th>\n",
       "      <th>-maltose_100g</th>\n",
       "      <th>-maltodextrins_100g</th>\n",
       "      <th>starch_100g</th>\n",
       "      <th>polyols_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>casein_100g</th>\n",
       "      <th>serum-proteins_100g</th>\n",
       "      <th>nucleotides_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>alcohol_100g</th>\n",
       "      <th>vitamin-a_100g</th>\n",
       "      <th>beta-carotene_100g</th>\n",
       "      <th>vitamin-d_100g</th>\n",
       "      <th>vitamin-e_100g</th>\n",
       "      <th>vitamin-k_100g</th>\n",
       "      <th>vitamin-c_100g</th>\n",
       "      <th>vitamin-b1_100g</th>\n",
       "      <th>vitamin-b2_100g</th>\n",
       "      <th>vitamin-pp_100g</th>\n",
       "      <th>vitamin-b6_100g</th>\n",
       "      <th>vitamin-b9_100g</th>\n",
       "      <th>folates_100g</th>\n",
       "      <th>vitamin-b12_100g</th>\n",
       "      <th>biotin_100g</th>\n",
       "      <th>pantothenic-acid_100g</th>\n",
       "      <th>silica_100g</th>\n",
       "      <th>bicarbonate_100g</th>\n",
       "      <th>potassium_100g</th>\n",
       "      <th>chloride_100g</th>\n",
       "      <th>calcium_100g</th>\n",
       "      <th>phosphorus_100g</th>\n",
       "      <th>iron_100g</th>\n",
       "      <th>magnesium_100g</th>\n",
       "      <th>zinc_100g</th>\n",
       "      <th>copper_100g</th>\n",
       "      <th>manganese_100g</th>\n",
       "      <th>fluoride_100g</th>\n",
       "      <th>selenium_100g</th>\n",
       "      <th>chromium_100g</th>\n",
       "      <th>molybdenum_100g</th>\n",
       "      <th>iodine_100g</th>\n",
       "      <th>caffeine_100g</th>\n",
       "      <th>taurine_100g</th>\n",
       "      <th>ph_100g</th>\n",
       "      <th>fruits-vegetables-nuts_100g</th>\n",
       "      <th>fruits-vegetables-nuts-estimate_100g</th>\n",
       "      <th>collagen-meat-protein-ratio_100g</th>\n",
       "      <th>cocoa_100g</th>\n",
       "      <th>chlorophyl_100g</th>\n",
       "      <th>carbon-footprint_100g</th>\n",
       "      <th>nutrition-score-fr_100g</th>\n",
       "      <th>nutrition-score-uk_100g</th>\n",
       "      <th>glycemic-index_100g</th>\n",
       "      <th>water-hardness_100g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.00000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.00000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.00000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1.851000e+03</td>\n",
       "      <td>1.851000e+03</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.00000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.000000</td>\n",
       "      <td>1851.0</td>\n",
       "      <td>1851.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.690978</td>\n",
       "      <td>0.145327</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1125.980627</td>\n",
       "      <td>17.264019</td>\n",
       "      <td>11.487369</td>\n",
       "      <td>4.251325</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000035</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.211051</td>\n",
       "      <td>0.727051</td>\n",
       "      <td>0.061654</td>\n",
       "      <td>0.062172</td>\n",
       "      <td>0.047774</td>\n",
       "      <td>0.003660</td>\n",
       "      <td>0.072429</td>\n",
       "      <td>0.077814</td>\n",
       "      <td>0.000250</td>\n",
       "      <td>0.000051</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.041329</td>\n",
       "      <td>0.011086</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.009664</td>\n",
       "      <td>0.000715</td>\n",
       "      <td>31.539800</td>\n",
       "      <td>11.668702</td>\n",
       "      <td>0.032685</td>\n",
       "      <td>0.001080</td>\n",
       "      <td>0.024095</td>\n",
       "      <td>0.62013</td>\n",
       "      <td>0.002863</td>\n",
       "      <td>0.071475</td>\n",
       "      <td>0.603317</td>\n",
       "      <td>0.10939</td>\n",
       "      <td>2.615642</td>\n",
       "      <td>8.840270</td>\n",
       "      <td>0.065829</td>\n",
       "      <td>0.020962</td>\n",
       "      <td>0.000105</td>\n",
       "      <td>0.903666</td>\n",
       "      <td>0.355777</td>\n",
       "      <td>0.005186</td>\n",
       "      <td>0.000157</td>\n",
       "      <td>0.008290</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.002069</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.019370</td>\n",
       "      <td>0.05165</td>\n",
       "      <td>0.000999</td>\n",
       "      <td>0.008152</td>\n",
       "      <td>0.059019</td>\n",
       "      <td>0.002700</td>\n",
       "      <td>1.080497e-08</td>\n",
       "      <td>6.618682e-07</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>0.001233</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.033994</td>\n",
       "      <td>0.006300</td>\n",
       "      <td>0.083942</td>\n",
       "      <td>0.036600</td>\n",
       "      <td>0.003302</td>\n",
       "      <td>0.018388</td>\n",
       "      <td>0.002805</td>\n",
       "      <td>0.020409</td>\n",
       "      <td>0.001252</td>\n",
       "      <td>0.000030</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000007</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000350</td>\n",
       "      <td>0.00362</td>\n",
       "      <td>2.620881</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.049163</td>\n",
       "      <td>1.032955</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.330632</td>\n",
       "      <td>7.343058</td>\n",
       "      <td>7.232307</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.115197</td>\n",
       "      <td>0.363100</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>684.203230</td>\n",
       "      <td>135.345661</td>\n",
       "      <td>12.242212</td>\n",
       "      <td>5.637256</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001488</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.875887</td>\n",
       "      <td>3.421846</td>\n",
       "      <td>0.614849</td>\n",
       "      <td>1.758567</td>\n",
       "      <td>1.975952</td>\n",
       "      <td>0.052007</td>\n",
       "      <td>1.113846</td>\n",
       "      <td>0.591677</td>\n",
       "      <td>0.004059</td>\n",
       "      <td>0.002208</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.609023</td>\n",
       "      <td>0.280457</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.073247</td>\n",
       "      <td>0.010924</td>\n",
       "      <td>27.582457</td>\n",
       "      <td>14.137130</td>\n",
       "      <td>0.813585</td>\n",
       "      <td>0.025232</td>\n",
       "      <td>0.999737</td>\n",
       "      <td>5.22163</td>\n",
       "      <td>0.112165</td>\n",
       "      <td>1.119052</td>\n",
       "      <td>5.261778</td>\n",
       "      <td>1.52820</td>\n",
       "      <td>3.548632</td>\n",
       "      <td>7.327018</td>\n",
       "      <td>0.651805</td>\n",
       "      <td>0.301265</td>\n",
       "      <td>0.001522</td>\n",
       "      <td>0.993872</td>\n",
       "      <td>0.391276</td>\n",
       "      <td>0.148452</td>\n",
       "      <td>0.002838</td>\n",
       "      <td>0.348702</td>\n",
       "      <td>0.000027</td>\n",
       "      <td>0.035813</td>\n",
       "      <td>0.000099</td>\n",
       "      <td>0.468029</td>\n",
       "      <td>2.18026</td>\n",
       "      <td>0.017248</td>\n",
       "      <td>0.187056</td>\n",
       "      <td>2.182109</td>\n",
       "      <td>0.094421</td>\n",
       "      <td>4.648649e-07</td>\n",
       "      <td>1.047821e-05</td>\n",
       "      <td>0.000213</td>\n",
       "      <td>0.025158</td>\n",
       "      <td>0.000044</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.144264</td>\n",
       "      <td>0.046224</td>\n",
       "      <td>0.937331</td>\n",
       "      <td>0.280948</td>\n",
       "      <td>0.050532</td>\n",
       "      <td>0.219264</td>\n",
       "      <td>0.093412</td>\n",
       "      <td>0.873945</td>\n",
       "      <td>0.025175</td>\n",
       "      <td>0.001163</td>\n",
       "      <td>0.000054</td>\n",
       "      <td>0.000070</td>\n",
       "      <td>0.000087</td>\n",
       "      <td>0.000176</td>\n",
       "      <td>0.000488</td>\n",
       "      <td>0.003546</td>\n",
       "      <td>0.15573</td>\n",
       "      <td>10.365653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.901208</td>\n",
       "      <td>8.046318</td>\n",
       "      <td>0.0</td>\n",
       "      <td>59.346494</td>\n",
       "      <td>8.223406</td>\n",
       "      <td>8.298685</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-12.000000</td>\n",
       "      <td>-12.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>490.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.260000</td>\n",
       "      <td>0.102362</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1031.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.100000</td>\n",
       "      <td>2.100000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.810000</td>\n",
       "      <td>4.570000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>7.330000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>0.295276</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1667.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>5.700000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>59.400000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>3.700000</td>\n",
       "      <td>10.700000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.200000</td>\n",
       "      <td>0.472441</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000729</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3768.000000</td>\n",
       "      <td>3590.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>85.700000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.064000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>68.800000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>1.400000</td>\n",
       "      <td>26.200000</td>\n",
       "      <td>14.800000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>0.095000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>68.800000</td>\n",
       "      <td>8.450000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.430000</td>\n",
       "      <td>92.400000</td>\n",
       "      <td>81.800000</td>\n",
       "      <td>26.100000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>58.50000</td>\n",
       "      <td>4.800000</td>\n",
       "      <td>27.500000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>40.00000</td>\n",
       "      <td>40.800000</td>\n",
       "      <td>84.000000</td>\n",
       "      <td>10.700000</td>\n",
       "      <td>5.800000</td>\n",
       "      <td>0.025000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>5.670000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.083000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>0.001100</td>\n",
       "      <td>1.350000</td>\n",
       "      <td>0.003600</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>93.80000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>7.517000</td>\n",
       "      <td>93.800000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000e-05</td>\n",
       "      <td>3.850000e-04</td>\n",
       "      <td>0.007690</td>\n",
       "      <td>0.923000</td>\n",
       "      <td>0.001912</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.509000</td>\n",
       "      <td>0.531000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.100000</td>\n",
       "      <td>9.020000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>37.600000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.002260</td>\n",
       "      <td>0.003010</td>\n",
       "      <td>0.003760</td>\n",
       "      <td>0.007520</td>\n",
       "      <td>0.021000</td>\n",
       "      <td>0.041000</td>\n",
       "      <td>6.70000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       cities  allergens_en  no_nutriments  additives_n  ingredients_from_palm_oil_n  ingredients_from_palm_oil  ingredients_that_may_be_from_palm_oil  nutrition_grade_uk  energy_100g  energy-from-fat_100g     fat_100g  saturated-fat_100g  -butyric-acid_100g  -caproic-acid_100g  -caprylic-acid_100g  -capric-acid_100g  -lauric-acid_100g  -myristic-acid_100g  -palmitic-acid_100g  -stearic-acid_100g  -arachidic-acid_100g  -behenic-acid_100g  -lignoceric-acid_100g  -cerotic-acid_100g  -montanic-acid_100g  -melissic-acid_100g  monounsaturated-fat_100g  polyunsaturated-fat_100g  omega-3-fat_100g  -alpha-linolenic-acid_100g  -eicosapentaenoic-acid_100g  -docosahexaenoic-acid_100g  omega-6-fat_100g  -linoleic-acid_100g  -arachidonic-acid_100g  -gamma-linolenic-acid_100g  -dihomo-gamma-linolenic-acid_100g  omega-9-fat_100g  -oleic-acid_100g  -elaidic-acid_100g  -gondoic-acid_100g  -mead-acid_100g  -erucic-acid_100g  -nervonic-acid_100g  trans-fat_100g  cholesterol_100g  carbohydrates_100g  \\\n",
       "count  1851.0        1851.0         1851.0  1851.000000                  1851.000000                     1851.0                                 1851.0              1851.0  1851.000000           1851.000000  1851.000000         1851.000000              1851.0              1851.0               1851.0             1851.0             1851.0               1851.0               1851.0              1851.0           1851.000000              1851.0                 1851.0              1851.0               1851.0               1851.0               1851.000000               1851.000000       1851.000000                 1851.000000                  1851.000000                 1851.000000       1851.000000          1851.000000             1851.000000                 1851.000000                             1851.0       1851.000000       1851.000000              1851.0              1851.0           1851.0             1851.0               1851.0     1851.000000       1851.000000         1851.000000   \n",
       "mean      0.0           0.0            0.0     3.690978                     0.145327                        0.0                                    0.0                 0.0  1125.980627             17.264019    11.487369            4.251325                 0.0                 0.0                  0.0                0.0                0.0                  0.0                  0.0                 0.0              0.000035                 0.0                    0.0                 0.0                  0.0                  0.0                  1.211051                  0.727051          0.061654                    0.062172                     0.047774                    0.003660          0.072429             0.077814                0.000250                    0.000051                                0.0          0.041329          0.011086                 0.0                 0.0              0.0                0.0                  0.0        0.009664          0.000715           31.539800   \n",
       "std       0.0           0.0            0.0     3.115197                     0.363100                        0.0                                    0.0                 0.0   684.203230            135.345661    12.242212            5.637256                 0.0                 0.0                  0.0                0.0                0.0                  0.0                  0.0                 0.0              0.001488                 0.0                    0.0                 0.0                  0.0                  0.0                  4.875887                  3.421846          0.614849                    1.758567                     1.975952                    0.052007          1.113846             0.591677                0.004059                    0.002208                                0.0          1.609023          0.280457                 0.0                 0.0              0.0                0.0                  0.0        0.073247          0.010924           27.582457   \n",
       "min       0.0           0.0            0.0     0.000000                     0.000000                        0.0                                    0.0                 0.0     0.000000              0.000000     0.000000            0.000000                 0.0                 0.0                  0.0                0.0                0.0                  0.0                  0.0                 0.0              0.000000                 0.0                    0.0                 0.0                  0.0                  0.0                  0.000000                  0.000000          0.000000                    0.000000                     0.000000                    0.000000          0.000000             0.000000                0.000000                    0.000000                                0.0          0.000000          0.000000                 0.0                 0.0              0.0                0.0                  0.0        0.000000          0.000000            0.000000   \n",
       "25%       0.0           0.0            0.0     1.000000                     0.000000                        0.0                                    0.0                 0.0   490.000000              0.000000     3.000000            0.800000                 0.0                 0.0                  0.0                0.0                0.0                  0.0                  0.0                 0.0              0.000000                 0.0                    0.0                 0.0                  0.0                  0.0                  0.000000                  0.000000          0.000000                    0.000000                     0.000000                    0.000000          0.000000             0.000000                0.000000                    0.000000                                0.0          0.000000          0.000000                 0.0                 0.0              0.0                0.0                  0.0        0.000000          0.000000            8.200000   \n",
       "50%       0.0           0.0            0.0     3.000000                     0.000000                        0.0                                    0.0                 0.0  1031.000000              0.000000     7.100000            2.100000                 0.0                 0.0                  0.0                0.0                0.0                  0.0                  0.0                 0.0              0.000000                 0.0                    0.0                 0.0                  0.0                  0.0                  0.000000                  0.000000          0.000000                    0.000000                     0.000000                    0.000000          0.000000             0.000000                0.000000                    0.000000                                0.0          0.000000          0.000000                 0.0                 0.0              0.0                0.0                  0.0        0.000000          0.000000           18.810000   \n",
       "75%       0.0           0.0            0.0     5.000000                     0.000000                        0.0                                    0.0                 0.0  1667.000000              0.000000    16.000000            5.700000                 0.0                 0.0                  0.0                0.0                0.0                  0.0                  0.0                 0.0              0.000000                 0.0                    0.0                 0.0                  0.0                  0.0                  0.000000                  0.000000          0.000000                    0.000000                     0.000000                    0.000000          0.000000             0.000000                0.000000                    0.000000                                0.0          0.000000          0.000000                 0.0                 0.0              0.0                0.0                  0.0        0.000000          0.000000           59.400000   \n",
       "max       0.0           0.0            0.0    19.000000                     2.000000                        0.0                                    0.0                 0.0  3768.000000           3590.000000   100.000000           85.700000                 0.0                 0.0                  0.0                0.0                0.0                  0.0                  0.0                 0.0              0.064000                 0.0                    0.0                 0.0                  0.0                  0.0                 68.800000                 57.000000         22.000000                   75.000000                    85.000000                    1.400000         26.200000            14.800000                0.090000                    0.095000                                0.0         68.800000          8.450000                 0.0                 0.0              0.0                0.0                  0.0        1.000000          0.430000           92.400000   \n",
       "\n",
       "       sugars_100g  -sucrose_100g  -glucose_100g  -fructose_100g  -lactose_100g  -maltose_100g  -maltodextrins_100g  starch_100g  polyols_100g   fiber_100g  proteins_100g  casein_100g  serum-proteins_100g  nucleotides_100g    salt_100g  sodium_100g  alcohol_100g  vitamin-a_100g  beta-carotene_100g  vitamin-d_100g  vitamin-e_100g  vitamin-k_100g  vitamin-c_100g  vitamin-b1_100g  vitamin-b2_100g  vitamin-pp_100g  vitamin-b6_100g  vitamin-b9_100g  folates_100g  vitamin-b12_100g  biotin_100g  pantothenic-acid_100g  silica_100g  bicarbonate_100g  potassium_100g  chloride_100g  calcium_100g  phosphorus_100g    iron_100g  magnesium_100g    zinc_100g  copper_100g  manganese_100g  fluoride_100g  selenium_100g  chromium_100g  molybdenum_100g  iodine_100g  caffeine_100g  taurine_100g     ph_100g  fruits-vegetables-nuts_100g  fruits-vegetables-nuts-estimate_100g  collagen-meat-protein-ratio_100g   cocoa_100g  chlorophyl_100g  carbon-footprint_100g  nutrition-score-fr_100g  \\\n",
       "count  1851.000000    1851.000000    1851.000000     1851.000000     1851.00000    1851.000000          1851.000000  1851.000000    1851.00000  1851.000000    1851.000000  1851.000000          1851.000000       1851.000000  1851.000000  1851.000000   1851.000000     1851.000000         1851.000000     1851.000000     1851.000000     1851.000000     1851.000000       1851.00000      1851.000000      1851.000000      1851.000000      1851.000000  1.851000e+03      1.851000e+03  1851.000000            1851.000000  1851.000000            1851.0     1851.000000    1851.000000   1851.000000      1851.000000  1851.000000     1851.000000  1851.000000  1851.000000     1851.000000    1851.000000    1851.000000    1851.000000      1851.000000  1851.000000    1851.000000   1851.000000  1851.00000                  1851.000000                                1851.0                       1851.000000  1851.000000           1851.0            1851.000000              1851.000000   \n",
       "mean     11.668702       0.032685       0.001080        0.024095        0.62013       0.002863             0.071475     0.603317       0.10939     2.615642       8.840270     0.065829             0.020962          0.000105     0.903666     0.355777      0.005186        0.000157            0.008290        0.000001        0.002069        0.000004        0.019370          0.05165         0.000999         0.008152         0.059019         0.002700  1.080497e-08      6.618682e-07     0.000010               0.001233     0.000001               0.0        0.033994       0.006300      0.083942         0.036600     0.003302        0.018388     0.002805     0.020409        0.001252       0.000030       0.000002       0.000002         0.000002     0.000007       0.000011      0.000350     0.00362                     2.620881                                   0.0                          0.049163     1.032955              0.0               5.330632                 7.343058   \n",
       "std      14.137130       0.813585       0.025232        0.999737        5.22163       0.112165             1.119052     5.261778       1.52820     3.548632       7.327018     0.651805             0.301265          0.001522     0.993872     0.391276      0.148452        0.002838            0.348702        0.000027        0.035813        0.000099        0.468029          2.18026         0.017248         0.187056         2.182109         0.094421  4.648649e-07      1.047821e-05     0.000213               0.025158     0.000044               0.0        0.144264       0.046224      0.937331         0.280948     0.050532        0.219264     0.093412     0.873945        0.025175       0.001163       0.000054       0.000070         0.000087     0.000176       0.000488      0.003546     0.15573                    10.365653                                   0.0                          0.901208     8.046318              0.0              59.346494                 8.223406   \n",
       "min       0.000000       0.000000       0.000000        0.000000        0.00000       0.000000             0.000000     0.000000       0.00000     0.000000       0.000000     0.000000             0.000000          0.000000     0.000000     0.000000      0.000000        0.000000            0.000000        0.000000        0.000000        0.000000        0.000000          0.00000         0.000000         0.000000         0.000000         0.000000  0.000000e+00      0.000000e+00     0.000000               0.000000     0.000000               0.0        0.000000       0.000000      0.000000         0.000000     0.000000        0.000000     0.000000     0.000000        0.000000       0.000000       0.000000       0.000000         0.000000     0.000000       0.000000      0.000000     0.00000                     0.000000                                   0.0                          0.000000     0.000000              0.0               0.000000               -12.000000   \n",
       "25%       1.600000       0.000000       0.000000        0.000000        0.00000       0.000000             0.000000     0.000000       0.00000     0.100000       4.700000     0.000000             0.000000          0.000000     0.260000     0.102362      0.000000        0.000000            0.000000        0.000000        0.000000        0.000000        0.000000          0.00000         0.000000         0.000000         0.000000         0.000000  0.000000e+00      0.000000e+00     0.000000               0.000000     0.000000               0.0        0.000000       0.000000      0.000000         0.000000     0.000000        0.000000     0.000000     0.000000        0.000000       0.000000       0.000000       0.000000         0.000000     0.000000       0.000000      0.000000     0.00000                     0.000000                                   0.0                          0.000000     0.000000              0.0               0.000000                 1.000000   \n",
       "50%       4.570000       0.000000       0.000000        0.000000        0.00000       0.000000             0.000000     0.000000       0.00000     1.500000       7.330000     0.000000             0.000000          0.000000     0.750000     0.295276      0.000000        0.000000            0.000000        0.000000        0.000000        0.000000        0.000000          0.00000         0.000000         0.000000         0.000000         0.000000  0.000000e+00      0.000000e+00     0.000000               0.000000     0.000000               0.0        0.000000       0.000000      0.000000         0.000000     0.000000        0.000000     0.000000     0.000000        0.000000       0.000000       0.000000       0.000000         0.000000     0.000000       0.000000      0.000000     0.00000                     0.000000                                   0.0                          0.000000     0.000000              0.0               0.000000                 6.000000   \n",
       "75%      20.000000       0.000000       0.000000        0.000000        0.00000       0.000000             0.000000     0.000000       0.00000     3.700000      10.700000     0.000000             0.000000          0.000000     1.200000     0.472441      0.000000        0.000000            0.000000        0.000000        0.000000        0.000000        0.000000          0.00000         0.000000         0.000000         0.000000         0.000000  0.000000e+00      0.000000e+00     0.000000               0.000000     0.000000               0.0        0.000000       0.000000      0.000000         0.000000     0.000729        0.000000     0.000000     0.000000        0.000000       0.000000       0.000000       0.000000         0.000000     0.000000       0.000000      0.000000     0.00000                     0.000000                                   0.0                          0.000000     0.000000              0.0               0.000000                14.000000   \n",
       "max      81.800000      26.100000       0.800000       43.000000       58.50000       4.800000            27.500000    76.000000      40.00000    40.800000      84.000000    10.700000             5.800000          0.025000    14.400000     5.670000      6.000000        0.083000           15.000000        0.001100        1.350000        0.003600       18.000000         93.80000         0.600000         7.517000        93.800000         4.000000  2.000000e-05      3.850000e-04     0.007690               0.923000     0.001912               0.0        1.509000       0.531000     37.000000         8.000000     2.100000        9.020000     4.000000    37.600000        0.700000       0.050000       0.002260       0.003010         0.003760     0.007520       0.021000      0.041000     6.70000                    85.000000                                   0.0                         25.000000    85.000000              0.0             900.000000                32.000000   \n",
       "\n",
       "       nutrition-score-uk_100g  glycemic-index_100g  water-hardness_100g  \n",
       "count              1851.000000               1851.0               1851.0  \n",
       "mean                  7.232307                  0.0                  0.0  \n",
       "std                   8.298685                  0.0                  0.0  \n",
       "min                 -12.000000                  0.0                  0.0  \n",
       "25%                   0.000000                  0.0                  0.0  \n",
       "50%                   5.000000                  0.0                  0.0  \n",
       "75%                  14.000000                  0.0                  0.0  \n",
       "max                  32.000000                  0.0                  0.0  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3['overall_nutrition'] =\\\n",
    "                        ( df3.energy_100g*(-.05) + df3['saturated-fat_100g']*(-1) + \\\n",
    "                         df3['trans-fat_100g']*(-1) + df3['sodium_100g']*(-.25)  + \\\n",
    "                         df3['-glucose_100g']*(-2) + df3['fiber_100g']*(2) +\\\n",
    "                         df3['proteins_100g']*(2) + df3['omega-3-fat_100g']*(2) + \\\n",
    "                         df3['glycemic-index_100g']*(-.5) + \\\n",
    "                         df3['fruits-vegetables-nuts_100g'] *(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "182     -46.57075\n",
       "1769    -31.20050\n",
       "1997    -35.35625\n",
       "3818     -1.04125\n",
       "11044   -45.83175\n",
       "Name: overall_nutrition, dtype: float64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.overall_nutrition.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19801    -265.200000\n",
       "271581   -197.300000\n",
       "231836   -180.200000\n",
       "232016   -164.758268\n",
       "212020   -156.477953\n",
       "Name: overall_nutrition, dtype: float64"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3['overall_nutrition'].sort_values().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "avg_health_country = df3.groupby('countries')['overall_nutrition'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "countries\n",
       "Ireland        32.681000\n",
       "Germany         5.520016\n",
       "Portugal        4.345666\n",
       "Sweden         -4.009843\n",
       "Guadeloupe    -10.100099\n",
       "Australia     -17.397000\n",
       "Netherlands   -20.650000\n",
       "France        -26.667361\n",
       "Switzerland   -35.969713\n",
       "Mexico        -38.877775\n",
       "Name: overall_nutrition, dtype: float64"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_health_country.nlargest(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_health = pd.DataFrame(avg_health_country)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_nutrition</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>countries</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Ireland</td>\n",
       "      <td>32.681000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Germany</td>\n",
       "      <td>5.520016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Portugal</td>\n",
       "      <td>4.345666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Sweden</td>\n",
       "      <td>-4.009843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Guadeloupe</td>\n",
       "      <td>-10.100099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Australia</td>\n",
       "      <td>-17.397000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Netherlands</td>\n",
       "      <td>-20.650000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>France</td>\n",
       "      <td>-26.667361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Switzerland</td>\n",
       "      <td>-35.969713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Mexico</td>\n",
       "      <td>-38.877775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Canada</td>\n",
       "      <td>-40.277159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>United States</td>\n",
       "      <td>-47.260868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Spain</td>\n",
       "      <td>-47.369249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Brazil</td>\n",
       "      <td>-50.852125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Argentina</td>\n",
       "      <td>-56.799000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Hungary</td>\n",
       "      <td>-59.521850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Belgium</td>\n",
       "      <td>-60.498427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fr:Quebec</td>\n",
       "      <td>-66.180000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Serbia</td>\n",
       "      <td>-71.123819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>-72.106178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>New Zealand</td>\n",
       "      <td>-87.485000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>South Africa</td>\n",
       "      <td>-89.909000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Saint Pierre and Miquelon</td>\n",
       "      <td>-102.390000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           overall_nutrition\n",
       "countries                                   \n",
       "Ireland                            32.681000\n",
       "Germany                             5.520016\n",
       "Portugal                            4.345666\n",
       "Sweden                             -4.009843\n",
       "Guadeloupe                        -10.100099\n",
       "Australia                         -17.397000\n",
       "Netherlands                       -20.650000\n",
       "France                            -26.667361\n",
       "Switzerland                       -35.969713\n",
       "Mexico                            -38.877775\n",
       "Canada                            -40.277159\n",
       "United States                     -47.260868\n",
       "Spain                             -47.369249\n",
       "Brazil                            -50.852125\n",
       "Argentina                         -56.799000\n",
       "Hungary                           -59.521850\n",
       "Belgium                           -60.498427\n",
       "fr:Quebec                         -66.180000\n",
       "Serbia                            -71.123819\n",
       "United Kingdom                    -72.106178\n",
       "New Zealand                       -87.485000\n",
       "South Africa                      -89.909000\n",
       "Saint Pierre and Miquelon        -102.390000"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_health.sort_values(by = 'overall_nutrition', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x21fbbff40c8>"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x='countries', y = 'overall_nutrition', kind = 'bar', data = df3, aspect = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x21f46161548>"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x='overall_nutrition', y = 'countries', kind = 'bar', data = df3, aspect = 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> RECOMMENDATION: <br> For people who want to be more health concious, we recommend avoiding foods with over 36 grams of sugar, as indicated above. We also recommend the foods with high nutrition scores listed in our dataframe.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <font color = blue> Finding #2 - Organic and Additive Relation </blue>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3['Organic'] = df3['product_name'].apply(lambda x: 1 if str(x).startswith('Organic') else 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.Organic.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x21f4127fb88>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x='additives_n',y='overall_nutrition',data=df3,\\\n",
    "         aspect=3,kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As additives increase, so does the average nutrition score (generally)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x21f4a1d61c8>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1127.12x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x='additives_n',y='overall_nutrition',data=df3,\\\n",
    "         aspect=3,kind='bar', hue='Organic')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Organic food products typically have fewer than 9 additives."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Organic\n",
       "0    1849\n",
       "1       2\n",
       "Name: additives_n, dtype: int64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.groupby('Organic')['additives_n'].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dataframe for Organic Foods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df3_organic = df3[df3.Organic == 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some indidviduals may be seeking to have a specific diet such as a daily intake of oats, nuts, and seeds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data with oats\n",
    "df3['oats'] = df3_organic.ingredients_text.str.contains('oats', regex=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df3.oats.fillna(value = 0, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>generic_name</th>\n",
       "      <th>quantity</th>\n",
       "      <th>packaging</th>\n",
       "      <th>packaging_tags</th>\n",
       "      <th>brands</th>\n",
       "      <th>categories</th>\n",
       "      <th>categories_tags</th>\n",
       "      <th>categories_en</th>\n",
       "      <th>origins</th>\n",
       "      <th>origins_tags</th>\n",
       "      <th>manufacturing_places</th>\n",
       "      <th>manufacturing_places_tags</th>\n",
       "      <th>labels</th>\n",
       "      <th>labels_tags</th>\n",
       "      <th>labels_en</th>\n",
       "      <th>emb_codes</th>\n",
       "      <th>emb_codes_tags</th>\n",
       "      <th>first_packaging_code_geo</th>\n",
       "      <th>cities</th>\n",
       "      <th>cities_tags</th>\n",
       "      <th>purchase_places</th>\n",
       "      <th>stores</th>\n",
       "      <th>countries</th>\n",
       "      <th>ingredients_text</th>\n",
       "      <th>allergens</th>\n",
       "      <th>allergens_en</th>\n",
       "      <th>traces</th>\n",
       "      <th>traces_tags</th>\n",
       "      <th>traces_en</th>\n",
       "      <th>serving_size</th>\n",
       "      <th>no_nutriments</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>additives</th>\n",
       "      <th>additives_tags</th>\n",
       "      <th>additives_en</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>ingredients_from_palm_oil</th>\n",
       "      <th>ingredients_from_palm_oil_tags</th>\n",
       "      <th>ingredients_that_may_be_from_palm_oil</th>\n",
       "      <th>ingredients_that_may_be_from_palm_oil_tags</th>\n",
       "      <th>nutrition_grade_uk</th>\n",
       "      <th>nutrition_grade_fr</th>\n",
       "      <th>pnns_groups_1</th>\n",
       "      <th>pnns_groups_2</th>\n",
       "      <th>main_category</th>\n",
       "      <th>main_category_en</th>\n",
       "      <th>image_url</th>\n",
       "      <th>image_small_url</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>energy-from-fat_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>-butyric-acid_100g</th>\n",
       "      <th>-caproic-acid_100g</th>\n",
       "      <th>-caprylic-acid_100g</th>\n",
       "      <th>-capric-acid_100g</th>\n",
       "      <th>-lauric-acid_100g</th>\n",
       "      <th>-myristic-acid_100g</th>\n",
       "      <th>-palmitic-acid_100g</th>\n",
       "      <th>-stearic-acid_100g</th>\n",
       "      <th>-arachidic-acid_100g</th>\n",
       "      <th>-behenic-acid_100g</th>\n",
       "      <th>-lignoceric-acid_100g</th>\n",
       "      <th>-cerotic-acid_100g</th>\n",
       "      <th>-montanic-acid_100g</th>\n",
       "      <th>-melissic-acid_100g</th>\n",
       "      <th>monounsaturated-fat_100g</th>\n",
       "      <th>polyunsaturated-fat_100g</th>\n",
       "      <th>omega-3-fat_100g</th>\n",
       "      <th>-alpha-linolenic-acid_100g</th>\n",
       "      <th>-eicosapentaenoic-acid_100g</th>\n",
       "      <th>-docosahexaenoic-acid_100g</th>\n",
       "      <th>omega-6-fat_100g</th>\n",
       "      <th>-linoleic-acid_100g</th>\n",
       "      <th>-arachidonic-acid_100g</th>\n",
       "      <th>-gamma-linolenic-acid_100g</th>\n",
       "      <th>-dihomo-gamma-linolenic-acid_100g</th>\n",
       "      <th>omega-9-fat_100g</th>\n",
       "      <th>-oleic-acid_100g</th>\n",
       "      <th>-elaidic-acid_100g</th>\n",
       "      <th>-gondoic-acid_100g</th>\n",
       "      <th>-mead-acid_100g</th>\n",
       "      <th>-erucic-acid_100g</th>\n",
       "      <th>-nervonic-acid_100g</th>\n",
       "      <th>trans-fat_100g</th>\n",
       "      <th>cholesterol_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>-sucrose_100g</th>\n",
       "      <th>-glucose_100g</th>\n",
       "      <th>-fructose_100g</th>\n",
       "      <th>-lactose_100g</th>\n",
       "      <th>-maltose_100g</th>\n",
       "      <th>-maltodextrins_100g</th>\n",
       "      <th>starch_100g</th>\n",
       "      <th>polyols_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>casein_100g</th>\n",
       "      <th>serum-proteins_100g</th>\n",
       "      <th>nucleotides_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>alcohol_100g</th>\n",
       "      <th>vitamin-a_100g</th>\n",
       "      <th>beta-carotene_100g</th>\n",
       "      <th>vitamin-d_100g</th>\n",
       "      <th>vitamin-e_100g</th>\n",
       "      <th>vitamin-k_100g</th>\n",
       "      <th>vitamin-c_100g</th>\n",
       "      <th>vitamin-b1_100g</th>\n",
       "      <th>vitamin-b2_100g</th>\n",
       "      <th>vitamin-pp_100g</th>\n",
       "      <th>vitamin-b6_100g</th>\n",
       "      <th>vitamin-b9_100g</th>\n",
       "      <th>folates_100g</th>\n",
       "      <th>vitamin-b12_100g</th>\n",
       "      <th>biotin_100g</th>\n",
       "      <th>pantothenic-acid_100g</th>\n",
       "      <th>silica_100g</th>\n",
       "      <th>bicarbonate_100g</th>\n",
       "      <th>potassium_100g</th>\n",
       "      <th>chloride_100g</th>\n",
       "      <th>calcium_100g</th>\n",
       "      <th>phosphorus_100g</th>\n",
       "      <th>iron_100g</th>\n",
       "      <th>magnesium_100g</th>\n",
       "      <th>zinc_100g</th>\n",
       "      <th>copper_100g</th>\n",
       "      <th>manganese_100g</th>\n",
       "      <th>fluoride_100g</th>\n",
       "      <th>selenium_100g</th>\n",
       "      <th>chromium_100g</th>\n",
       "      <th>molybdenum_100g</th>\n",
       "      <th>iodine_100g</th>\n",
       "      <th>caffeine_100g</th>\n",
       "      <th>taurine_100g</th>\n",
       "      <th>ph_100g</th>\n",
       "      <th>fruits-vegetables-nuts_100g</th>\n",
       "      <th>fruits-vegetables-nuts-estimate_100g</th>\n",
       "      <th>collagen-meat-protein-ratio_100g</th>\n",
       "      <th>cocoa_100g</th>\n",
       "      <th>chlorophyl_100g</th>\n",
       "      <th>carbon-footprint_100g</th>\n",
       "      <th>nutrition-score-fr_100g</th>\n",
       "      <th>nutrition-score-uk_100g</th>\n",
       "      <th>glycemic-index_100g</th>\n",
       "      <th>water-hardness_100g</th>\n",
       "      <th>overall_nutrition</th>\n",
       "      <th>Organic</th>\n",
       "      <th>oats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>11142</td>\n",
       "      <td>Organic Thin-Sliced 21 Whole Grains And Seeds ...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Dave's Killer Bread</td>\n",
       "      <td>sliced bread</td>\n",
       "      <td>en:plant-based-foods-and-beverages,en:plant-ba...</td>\n",
       "      <td>Plant-based foods and beverages,Plant-based fo...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Organic,USDA Organic</td>\n",
       "      <td>en:organic,en:usda-organic</td>\n",
       "      <td>Organic,USDA Organic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>California</td>\n",
       "      <td>0</td>\n",
       "      <td>United States</td>\n",
       "      <td>Organic whole wheat (organic whole wheat flour...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Grains,Seeds,Tree nuts</td>\n",
       "      <td>en:grains,en:seeds,en:tree-nuts</td>\n",
       "      <td>Grains,Seeds,Tree-nuts</td>\n",
       "      <td>1 slice (28 g)</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ organic-whole-wheat -&gt; en:organic-whole-whe...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>a</td>\n",
       "      <td>Cereals and potatoes</td>\n",
       "      <td>Bread</td>\n",
       "      <td>en:plant-based-foods-and-beverages</td>\n",
       "      <td>Plant-based foods and beverages</td>\n",
       "      <td>http://en.openfoodfacts.org/images/products/00...</td>\n",
       "      <td>http://en.openfoodfacts.org/images/products/00...</td>\n",
       "      <td>896.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.429</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.9</td>\n",
       "      <td>7.14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.7</td>\n",
       "      <td>10.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.907</td>\n",
       "      <td>0.357</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000375</td>\n",
       "      <td>0.000121</td>\n",
       "      <td>0.00286</td>\n",
       "      <td>0.000214</td>\n",
       "      <td>0.000029</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000357</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.214</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0357</td>\n",
       "      <td>0.214</td>\n",
       "      <td>0.00257</td>\n",
       "      <td>0.0714</td>\n",
       "      <td>0.00161</td>\n",
       "      <td>0.000286</td>\n",
       "      <td>0.00179</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000033</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-2.08925</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            product_name generic_name quantity packaging packaging_tags               brands    categories                                    categories_tags                                      categories_en origins origins_tags manufacturing_places manufacturing_places_tags                labels                 labels_tags             labels_en emb_codes emb_codes_tags first_packaging_code_geo  cities cities_tags purchase_places stores      countries                                   ingredients_text allergens  allergens_en                  traces                      traces_tags               traces_en    serving_size  no_nutriments  additives_n                                          additives additives_tags additives_en  ingredients_from_palm_oil_n  ingredients_from_palm_oil ingredients_from_palm_oil_tags  ingredients_that_may_be_from_palm_oil ingredients_that_may_be_from_palm_oil_tags  nutrition_grade_uk nutrition_grade_fr         pnns_groups_1  \\\n",
       "11142  Organic Thin-Sliced 21 Whole Grains And Seeds ...            0        0         0              0  Dave's Killer Bread  sliced bread  en:plant-based-foods-and-beverages,en:plant-ba...  Plant-based foods and beverages,Plant-based fo...       0            0                    0                         0  Organic,USDA Organic  en:organic,en:usda-organic  Organic,USDA Organic         0              0                        0       0           0      California      0  United States  Organic whole wheat (organic whole wheat flour...         0             0  Grains,Seeds,Tree nuts  en:grains,en:seeds,en:tree-nuts  Grains,Seeds,Tree-nuts  1 slice (28 g)            0.0          0.0   [ organic-whole-wheat -> en:organic-whole-whe...              0            0                          0.0                        0.0                              0                                    0.0                                          0                 0.0                  a  Cereals and potatoes   \n",
       "\n",
       "      pnns_groups_2                       main_category                 main_category_en                                          image_url                                    image_small_url  energy_100g  energy-from-fat_100g  fat_100g  saturated-fat_100g  -butyric-acid_100g  -caproic-acid_100g  -caprylic-acid_100g  -capric-acid_100g  -lauric-acid_100g  -myristic-acid_100g  -palmitic-acid_100g  -stearic-acid_100g  -arachidic-acid_100g  -behenic-acid_100g  -lignoceric-acid_100g  -cerotic-acid_100g  -montanic-acid_100g  -melissic-acid_100g  monounsaturated-fat_100g  polyunsaturated-fat_100g  omega-3-fat_100g  -alpha-linolenic-acid_100g  -eicosapentaenoic-acid_100g  -docosahexaenoic-acid_100g  omega-6-fat_100g  -linoleic-acid_100g  -arachidonic-acid_100g  -gamma-linolenic-acid_100g  -dihomo-gamma-linolenic-acid_100g  omega-9-fat_100g  -oleic-acid_100g  -elaidic-acid_100g  -gondoic-acid_100g  -mead-acid_100g  -erucic-acid_100g  -nervonic-acid_100g  trans-fat_100g  cholesterol_100g  \\\n",
       "11142         Bread  en:plant-based-foods-and-beverages  Plant-based foods and beverages  http://en.openfoodfacts.org/images/products/00...  http://en.openfoodfacts.org/images/products/00...        896.0                  75.0      3.57                 0.0                 0.0                 0.0                  0.0                0.0                0.0                  0.0                  0.0                 0.0                   0.0                 0.0                    0.0                 0.0                  0.0                  0.0                       0.0                       0.0               0.0                       0.429                          0.0                         0.0               0.0                  0.0                     0.0                         0.0                                0.0               0.0               0.0                 0.0                 0.0              0.0                0.0                  0.0             0.0               0.0   \n",
       "\n",
       "       carbohydrates_100g  sugars_100g  -sucrose_100g  -glucose_100g  -fructose_100g  -lactose_100g  -maltose_100g  -maltodextrins_100g  starch_100g  polyols_100g  fiber_100g  proteins_100g  casein_100g  serum-proteins_100g  nucleotides_100g  salt_100g  sodium_100g  alcohol_100g  vitamin-a_100g  beta-carotene_100g  vitamin-d_100g  vitamin-e_100g  vitamin-k_100g  vitamin-c_100g  vitamin-b1_100g  vitamin-b2_100g  vitamin-pp_100g  vitamin-b6_100g  vitamin-b9_100g  folates_100g  vitamin-b12_100g  biotin_100g  pantothenic-acid_100g  silica_100g  bicarbonate_100g  potassium_100g  chloride_100g  calcium_100g  phosphorus_100g  iron_100g  magnesium_100g  zinc_100g  copper_100g  manganese_100g  fluoride_100g  selenium_100g  chromium_100g  molybdenum_100g  iodine_100g  caffeine_100g  taurine_100g  ph_100g  fruits-vegetables-nuts_100g  fruits-vegetables-nuts-estimate_100g  collagen-meat-protein-ratio_100g  cocoa_100g  chlorophyl_100g  carbon-footprint_100g  nutrition-score-fr_100g  \\\n",
       "11142                42.9         7.14            0.0            0.0             0.0            0.0            0.0                  0.0          0.0           0.0        10.7           10.7          0.0                  0.0               0.0      0.907        0.357           0.0             0.0                 0.0             0.0             0.0             0.0             0.0         0.000375         0.000121          0.00286         0.000214         0.000029           0.0               0.0          0.0               0.000357          0.0               0.0           0.214            0.0        0.0357            0.214    0.00257          0.0714    0.00161     0.000286         0.00179            0.0       0.000033            0.0              0.0          0.0            0.0           0.0      0.0                          0.0                                   0.0                               0.0         0.0              0.0                    0.0                     -4.0   \n",
       "\n",
       "       nutrition-score-uk_100g  glycemic-index_100g  water-hardness_100g  overall_nutrition  Organic  oats  \n",
       "11142                     -4.0                  0.0                  0.0           -2.08925        1  True  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[df3.oats == 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> RECOMMENDATION: <br> Companies should not worry too much about number of additives in food when looking to produce healthier foods.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <font color = blue> Finding #3 - Target Market Analysis: US </blue>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What are the most popular foods in the world?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ice Cream                 411\n",
       "Extra Virgin Olive Oil    303\n",
       "Potato Chips              281\n",
       "Premium Ice Cream         226\n",
       "Tomato Ketchup            190\n",
       "Name: product_name, dtype: int64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.product_name.value_counts().nlargest(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ice Cream is the most popular food in the world, meaning that it is enjoyed by all age groups and all countries."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <font color=blue> What kind of products should new food brands make to be successful in the US?</blue> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The top five brands with the most products:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "us = df4[df4.countries == 'United States']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Meijer      1995\n",
       "Kroger      1659\n",
       "Ahold       1370\n",
       "Spartan     1341\n",
       "Roundy's    1299\n",
       "Name: brands, dtype: int64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "us.brands.value_counts()[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Number of brands in the US:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28396"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(us.brands.unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most produced food items in United States:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ice Cream                 408\n",
       "Extra Virgin Olive Oil    298\n",
       "Potato Chips              281\n",
       "Premium Ice Cream         226\n",
       "Beef Jerky                166\n",
       "Pinto Beans               162\n",
       "Popcorn                   151\n",
       "Salsa                     149\n",
       "Cookies                   144\n",
       "Cut Green Beans           140\n",
       "Name: product_name, dtype: int64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "us.product_name.value_counts()[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>brands</th>\n",
       "      <th>countries</th>\n",
       "      <th>ingredients_text</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>additives</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>nutrition_grade_fr</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>avg_nutrition_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Banana Chips Sweetened (Whole)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States</td>\n",
       "      <td>Bananas, vegetable oil (coconut oil, corn oil ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ bananas -&gt; en:bananas  ]  [ vegetable-oil -...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>2243.0</td>\n",
       "      <td>28.57</td>\n",
       "      <td>28.57</td>\n",
       "      <td>64.29</td>\n",
       "      <td>14.29</td>\n",
       "      <td>3.6</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Peanuts</td>\n",
       "      <td>Torn &amp; Glasser</td>\n",
       "      <td>United States</td>\n",
       "      <td>Peanuts, wheat flour, sugar, rice flour, tapio...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ peanuts -&gt; en:peanuts  ]  [ wheat-flour -&gt; ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>b</td>\n",
       "      <td>1941.0</td>\n",
       "      <td>17.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>60.71</td>\n",
       "      <td>17.86</td>\n",
       "      <td>7.1</td>\n",
       "      <td>17.86</td>\n",
       "      <td>0.63500</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Organic Salted Nut Mix</td>\n",
       "      <td>Grizzlies</td>\n",
       "      <td>United States</td>\n",
       "      <td>Organic hazelnuts, organic cashews, organic wa...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ organic-hazelnuts -&gt; en:organic-hazelnuts  ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>2540.0</td>\n",
       "      <td>57.14</td>\n",
       "      <td>5.36</td>\n",
       "      <td>17.86</td>\n",
       "      <td>3.57</td>\n",
       "      <td>7.1</td>\n",
       "      <td>17.86</td>\n",
       "      <td>1.22428</td>\n",
       "      <td>0.482</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Organic Polenta</td>\n",
       "      <td>Bob's Red Mill</td>\n",
       "      <td>United States</td>\n",
       "      <td>Organic polenta</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ organic-polenta -&gt; en:organic-polenta  ]  [...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1552.0</td>\n",
       "      <td>1.43</td>\n",
       "      <td>NaN</td>\n",
       "      <td>77.14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.7</td>\n",
       "      <td>8.57</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Breadshop Honey Gone Nuts Granola</td>\n",
       "      <td>Unfi</td>\n",
       "      <td>United States</td>\n",
       "      <td>Rolled oats, grape concentrate, expeller press...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ rolled-oats -&gt; en:rolled-oats  ]  [ oats -&gt;...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1933.0</td>\n",
       "      <td>18.27</td>\n",
       "      <td>1.92</td>\n",
       "      <td>63.46</td>\n",
       "      <td>11.54</td>\n",
       "      <td>7.7</td>\n",
       "      <td>13.46</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        product_name          brands      countries                                   ingredients_text  additives_n                                          additives  ingredients_from_palm_oil_n nutrition_grade_fr  energy_100g  fat_100g  saturated-fat_100g  carbohydrates_100g  sugars_100g  fiber_100g  proteins_100g  salt_100g  sodium_100g  avg_nutrition_score\n",
       "1     Banana Chips Sweetened (Whole)             NaN  United States  Bananas, vegetable oil (coconut oil, corn oil ...          0.0   [ bananas -> en:bananas  ]  [ vegetable-oil -...                          0.0                  d       2243.0     28.57               28.57               64.29        14.29         3.6           3.57    0.00000        0.000                 14.0\n",
       "2                            Peanuts  Torn & Glasser  United States  Peanuts, wheat flour, sugar, rice flour, tapio...          0.0   [ peanuts -> en:peanuts  ]  [ wheat-flour -> ...                          0.0                  b       1941.0     17.86                0.00               60.71        17.86         7.1          17.86    0.63500        0.250                  0.0\n",
       "3             Organic Salted Nut Mix       Grizzlies  United States  Organic hazelnuts, organic cashews, organic wa...          0.0   [ organic-hazelnuts -> en:organic-hazelnuts  ...                          0.0                  d       2540.0     57.14                5.36               17.86         3.57         7.1          17.86    1.22428        0.482                 12.0\n",
       "4                    Organic Polenta  Bob's Red Mill  United States                                    Organic polenta          0.0   [ organic-polenta -> en:organic-polenta  ]  [...                          0.0                NaN       1552.0      1.43                 NaN               77.14          NaN         5.7           8.57        NaN          NaN                  NaN\n",
       "5  Breadshop Honey Gone Nuts Granola            Unfi  United States  Rolled oats, grape concentrate, expeller press...          0.0   [ rolled-oats -> en:rolled-oats  ]  [ oats ->...                          0.0                NaN       1933.0     18.27                1.92               63.46        11.54         7.7          13.46        NaN          NaN                  NaN"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "us.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nutrition of US foods overall:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.4437286088182"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "us.avg_nutrition_score.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## US food analysis:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Ice Cream:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4_icecream = df4[df4.product_name=='Ice Cream']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.replace(to_replace='Premium Ice Cream', value='Ice Cream', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>brands</th>\n",
       "      <th>countries</th>\n",
       "      <th>ingredients_text</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>additives</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>nutrition_grade_fr</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>avg_nutrition_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1803</td>\n",
       "      <td>Ice Cream</td>\n",
       "      <td>Private Selection</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ice cream - milk, cream, sugar, corn syrup, na...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>[ ice-cream -&gt; en:ice-cream  ]  [ cream -&gt; en...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>1134.0</td>\n",
       "      <td>14.12</td>\n",
       "      <td>9.41</td>\n",
       "      <td>30.59</td>\n",
       "      <td>25.88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.71</td>\n",
       "      <td>0.20828</td>\n",
       "      <td>0.082</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1875</td>\n",
       "      <td>Ice Cream</td>\n",
       "      <td>Prrivate Selection</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ice cream - milk, cream, sugar, corn syrup, wh...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>[ ice-cream -&gt; en:ice-cream  ]  [ cream -&gt; en...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>1046.0</td>\n",
       "      <td>13.10</td>\n",
       "      <td>7.14</td>\n",
       "      <td>28.57</td>\n",
       "      <td>22.62</td>\n",
       "      <td>1.2</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.22606</td>\n",
       "      <td>0.089</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2021</td>\n",
       "      <td>Ice Cream</td>\n",
       "      <td>Private Selection</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ice cream - milk, cream, sugar, corn syrup, na...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[ ice-cream -&gt; en:ice-cream  ]  [ cream -&gt; en...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>1084.0</td>\n",
       "      <td>12.94</td>\n",
       "      <td>8.24</td>\n",
       "      <td>32.94</td>\n",
       "      <td>25.88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.71</td>\n",
       "      <td>0.37338</td>\n",
       "      <td>0.147</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2058</td>\n",
       "      <td>Ice Cream</td>\n",
       "      <td>Private Selection</td>\n",
       "      <td>United States</td>\n",
       "      <td>Milk, cream, sugar, corn syrup, coffee concent...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>[ milk -&gt; en:milk  ]  [ cream -&gt; en:cream  ] ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>891.0</td>\n",
       "      <td>11.70</td>\n",
       "      <td>7.45</td>\n",
       "      <td>24.47</td>\n",
       "      <td>19.15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.19</td>\n",
       "      <td>0.13462</td>\n",
       "      <td>0.053</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2560</td>\n",
       "      <td>Ice Cream</td>\n",
       "      <td>The Kroger Co.</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ice cream: milk, cream, corn syrup, sugar, hig...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>[ ice-cream -&gt; en:ice-cream  ]  [ cream -&gt; en...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>916.0</td>\n",
       "      <td>10.94</td>\n",
       "      <td>7.03</td>\n",
       "      <td>28.12</td>\n",
       "      <td>25.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.12</td>\n",
       "      <td>0.17780</td>\n",
       "      <td>0.070</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     product_name              brands      countries                                   ingredients_text  additives_n                                          additives  ingredients_from_palm_oil_n nutrition_grade_fr  energy_100g  fat_100g  saturated-fat_100g  carbohydrates_100g  sugars_100g  fiber_100g  proteins_100g  salt_100g  sodium_100g  avg_nutrition_score\n",
       "1803    Ice Cream   Private Selection  United States  Ice cream - milk, cream, sugar, corn syrup, na...          5.0   [ ice-cream -> en:ice-cream  ]  [ cream -> en...                          0.0                  d       1134.0     14.12                9.41               30.59        25.88         0.0           4.71    0.20828        0.082                 17.0\n",
       "1875    Ice Cream  Prrivate Selection  United States  Ice cream - milk, cream, sugar, corn syrup, wh...          5.0   [ ice-cream -> en:ice-cream  ]  [ cream -> en...                          0.0                  d       1046.0     13.10                7.14               28.57        22.62         1.2           3.57    0.22606        0.089                 14.0\n",
       "2021    Ice Cream   Private Selection  United States  Ice cream - milk, cream, sugar, corn syrup, na...          4.0   [ ice-cream -> en:ice-cream  ]  [ cream -> en...                          0.0                  d       1084.0     12.94                8.24               32.94        25.88         0.0           4.71    0.37338        0.147                 17.0\n",
       "2058    Ice Cream   Private Selection  United States  Milk, cream, sugar, corn syrup, coffee concent...          5.0   [ milk -> en:milk  ]  [ cream -> en:cream  ] ...                          0.0                  d        891.0     11.70                7.45               24.47        19.15         0.0           3.19    0.13462        0.053                 13.0\n",
       "2560    Ice Cream      The Kroger Co.  United States  Ice cream: milk, cream, corn syrup, sugar, hig...          7.0   [ ice-cream -> en:ice-cream  ]  [ cream -> en...                          0.0                  d        916.0     10.94                7.03               28.12        25.00         0.0           3.12    0.17780        0.070                 14.0"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_icecream.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12.595121951219513"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_icecream.avg_nutrition_score.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "411"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_icecream.sugars_100g > .36).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "407"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_icecream['saturated-fat_100g']> .13).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "97.64521193092621"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(622/637) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "410"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_icecream['additives'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99.84301412872841"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(636/637)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ice cream nutrition facts summary:**\n",
    "- All ice cream products are over the recommended daily intake of sugar (36 g)\n",
    "- 97.6% of ice cream products are over the recommended daily intake of saturated fat(100 g)\n",
    "- 99.8% of ice cream products contain additives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Extra Virgin Olive Oil**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4_oliveoil = df4[df4.product_name=='Extra Virgin Olive Oil'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>brands</th>\n",
       "      <th>countries</th>\n",
       "      <th>ingredients_text</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>additives</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>nutrition_grade_fr</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>avg_nutrition_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>482</td>\n",
       "      <td>Extra Virgin Olive Oil</td>\n",
       "      <td>Trader Giotto's,  Ciel De Bleu  Inc.</td>\n",
       "      <td>United States</td>\n",
       "      <td>Extra virgin olive oil</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ extra-virgin-olive-oil -&gt; en:extra-virgin-o...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3347.0</td>\n",
       "      <td>93.33</td>\n",
       "      <td>13.33</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>662</td>\n",
       "      <td>Extra Virgin Olive Oil</td>\n",
       "      <td>Fresh Aisle</td>\n",
       "      <td>United States</td>\n",
       "      <td>Extra virgin olive oil</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ extra-virgin-olive-oil -&gt; en:extra-virgin-o...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3586.0</td>\n",
       "      <td>100.00</td>\n",
       "      <td>14.29</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3755</td>\n",
       "      <td>Extra Virgin Olive Oil</td>\n",
       "      <td>Simple Truth Organic</td>\n",
       "      <td>United States</td>\n",
       "      <td>Organic extract virgin olive oil.</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ organic-extract-virgin-olive-oil -&gt; en:orga...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3347.0</td>\n",
       "      <td>93.33</td>\n",
       "      <td>13.33</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3928</td>\n",
       "      <td>Extra Virgin Olive Oil</td>\n",
       "      <td>Hemis Fares</td>\n",
       "      <td>United States</td>\n",
       "      <td>Extra virgin olive oil.</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ extra-virgin-olive-oil -&gt; en:extra-virgin-o...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>e</td>\n",
       "      <td>3347.0</td>\n",
       "      <td>93.33</td>\n",
       "      <td>13.33</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4032</td>\n",
       "      <td>Extra Virgin Olive Oil</td>\n",
       "      <td>The Kroger Co.</td>\n",
       "      <td>United States</td>\n",
       "      <td>Extra virgin olive oil.</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ extra-virgin-olive-oil -&gt; en:extra-virgin-o...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3347.0</td>\n",
       "      <td>93.33</td>\n",
       "      <td>13.33</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                product_name                                brands      countries                   ingredients_text  additives_n                                          additives  ingredients_from_palm_oil_n nutrition_grade_fr  energy_100g  fat_100g  saturated-fat_100g  carbohydrates_100g  sugars_100g  fiber_100g  proteins_100g  salt_100g  sodium_100g  avg_nutrition_score\n",
       "482   Extra Virgin Olive Oil  Trader Giotto's,  Ciel De Bleu  Inc.  United States             Extra virgin olive oil          0.0   [ extra-virgin-olive-oil -> en:extra-virgin-o...                          0.0                NaN       3347.0     93.33               13.33                 0.0          NaN         NaN            0.0        0.0          0.0                  NaN\n",
       "662   Extra Virgin Olive Oil                           Fresh Aisle  United States             Extra virgin olive oil          0.0   [ extra-virgin-olive-oil -> en:extra-virgin-o...                          0.0                NaN       3586.0    100.00               14.29                 0.0          NaN         NaN            0.0        0.0          0.0                  NaN\n",
       "3755  Extra Virgin Olive Oil                  Simple Truth Organic  United States  Organic extract virgin olive oil.          0.0   [ organic-extract-virgin-olive-oil -> en:orga...                          0.0                NaN       3347.0     93.33               13.33                 0.0          NaN         NaN            0.0        0.0          0.0                  NaN\n",
       "3928  Extra Virgin Olive Oil                           Hemis Fares  United States            Extra virgin olive oil.          0.0   [ extra-virgin-olive-oil -> en:extra-virgin-o...                          0.0                  e       3347.0     93.33               13.33                 0.0          0.0         0.0            0.0        0.0          0.0                 19.0\n",
       "4032  Extra Virgin Olive Oil                        The Kroger Co.  United States            Extra virgin olive oil.          0.0   [ extra-virgin-olive-oil -> en:extra-virgin-o...                          0.0                NaN       3347.0     93.33               13.33                 0.0          NaN         NaN            0.0        0.0          0.0                  NaN"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_oliveoil.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18.304347826086957"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_oliveoil.avg_nutrition_score.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_oliveoil.sugars_100g > .36).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33003300330033003"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1/303)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "298"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_oliveoil['saturated-fat_100g']> .13).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "98.34983498349835"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(298/303) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "300"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_oliveoil['additives'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99.00990099009901"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(300/303)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Olive Oil nutrition facts summary:**\n",
    "- Average nutrition score: 18.3\n",
    "- Only one olive oil product is over the recommended daily intake of sugar (36 g)\n",
    "- 97.6% of olive oil products are over the recommended daily intake of saturated fat(100 g)\n",
    "- 99.8% of olive oil products contain additives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Potato Chips**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4_potatochips = df4[df4.product_name=='Potato Chips'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>brands</th>\n",
       "      <th>countries</th>\n",
       "      <th>ingredients_text</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>additives</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>nutrition_grade_fr</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>avg_nutrition_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3310</td>\n",
       "      <td>Potato Chips</td>\n",
       "      <td>Fredmeyer</td>\n",
       "      <td>United States</td>\n",
       "      <td>Potatoes, vegetable oil (corn, sunflower, and/...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[ potatoes -&gt; en:potatoes  ]  [ vegetable-oil...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>2243.0</td>\n",
       "      <td>35.71</td>\n",
       "      <td>5.36</td>\n",
       "      <td>53.57</td>\n",
       "      <td>7.14</td>\n",
       "      <td>3.6</td>\n",
       "      <td>3.57</td>\n",
       "      <td>1.81356</td>\n",
       "      <td>0.714</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5835</td>\n",
       "      <td>Potato Chips</td>\n",
       "      <td>Roundy's</td>\n",
       "      <td>United States</td>\n",
       "      <td>Potatoes, sunflower and/or canola oil, sugar, ...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[ potatoes -&gt; en:potatoes  ]  [ sunflower-and...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>c</td>\n",
       "      <td>2243.0</td>\n",
       "      <td>28.57</td>\n",
       "      <td>1.79</td>\n",
       "      <td>57.14</td>\n",
       "      <td>3.57</td>\n",
       "      <td>3.6</td>\n",
       "      <td>7.14</td>\n",
       "      <td>1.54178</td>\n",
       "      <td>0.607</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6972</td>\n",
       "      <td>Potato Chips</td>\n",
       "      <td>Shurfine</td>\n",
       "      <td>United States</td>\n",
       "      <td>Potatoes, corn oil and/or sunflower oil, whey,...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>[ potatoes -&gt; en:potatoes  ]  [ corn-oil-and-...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>2243.0</td>\n",
       "      <td>32.14</td>\n",
       "      <td>3.57</td>\n",
       "      <td>57.14</td>\n",
       "      <td>3.57</td>\n",
       "      <td>3.6</td>\n",
       "      <td>7.14</td>\n",
       "      <td>1.81356</td>\n",
       "      <td>0.714</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9209</td>\n",
       "      <td>Potato Chips</td>\n",
       "      <td>Valu Time</td>\n",
       "      <td>United States</td>\n",
       "      <td>Potatoes, corn oil and/or sunflower oil, whey,...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>[ potatoes -&gt; en:potatoes  ]  [ corn-oil-and-...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>2243.0</td>\n",
       "      <td>32.14</td>\n",
       "      <td>3.57</td>\n",
       "      <td>60.71</td>\n",
       "      <td>7.14</td>\n",
       "      <td>3.6</td>\n",
       "      <td>7.14</td>\n",
       "      <td>1.54178</td>\n",
       "      <td>0.607</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10305</td>\n",
       "      <td>Potato Chips</td>\n",
       "      <td>Downey's</td>\n",
       "      <td>United States</td>\n",
       "      <td>Potatoes, partially hydrogenated vegetable oil...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ potatoes -&gt; en:potatoes  ]  [ partially-hyd...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>c</td>\n",
       "      <td>2389.0</td>\n",
       "      <td>39.29</td>\n",
       "      <td>7.14</td>\n",
       "      <td>50.00</td>\n",
       "      <td>3.57</td>\n",
       "      <td>3.6</td>\n",
       "      <td>7.14</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       product_name     brands      countries                                   ingredients_text  additives_n                                          additives  ingredients_from_palm_oil_n nutrition_grade_fr  energy_100g  fat_100g  saturated-fat_100g  carbohydrates_100g  sugars_100g  fiber_100g  proteins_100g  salt_100g  sodium_100g  avg_nutrition_score\n",
       "3310   Potato Chips  Fredmeyer  United States  Potatoes, vegetable oil (corn, sunflower, and/...          3.0   [ potatoes -> en:potatoes  ]  [ vegetable-oil...                          0.0                  d       2243.0     35.71                5.36               53.57         7.14         3.6           3.57    1.81356        0.714                 14.0\n",
       "5835   Potato Chips   Roundy's  United States  Potatoes, sunflower and/or canola oil, sugar, ...          3.0   [ potatoes -> en:potatoes  ]  [ sunflower-and...                          0.0                  c       2243.0     28.57                1.79               57.14         3.57         3.6           7.14    1.54178        0.607                  8.0\n",
       "6972   Potato Chips   Shurfine  United States  Potatoes, corn oil and/or sunflower oil, whey,...          2.0   [ potatoes -> en:potatoes  ]  [ corn-oil-and-...                          0.0                  d       2243.0     32.14                3.57               57.14         3.57         3.6           7.14    1.81356        0.714                 11.0\n",
       "9209   Potato Chips  Valu Time  United States  Potatoes, corn oil and/or sunflower oil, whey,...          2.0   [ potatoes -> en:potatoes  ]  [ corn-oil-and-...                          0.0                  d       2243.0     32.14                3.57               60.71         7.14         3.6           7.14    1.54178        0.607                 11.0\n",
       "10305  Potato Chips   Downey's  United States  Potatoes, partially hydrogenated vegetable oil...          0.0   [ potatoes -> en:potatoes  ]  [ partially-hyd...                          0.0                  c       2389.0     39.29                7.14               50.00         3.57         3.6           7.14    0.00000        0.000                  9.0"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_potatochips.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13.192028985507246"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_potatochips.avg_nutrition_score.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "195"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_potatochips.sugars_100g > .36).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69.3950177935943"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(195/281)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "277"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_potatochips['saturated-fat_100g']> .13).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "98.57651245551602"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(277/281) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "281"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_potatochips['additives'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.0"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*(281/281)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Potato chip nutrition facts summary:**\n",
    "- Average nutrition score: 13.2\n",
    "- 69.4% of potato chip products are over the recommended daily intake of sugar (36 g)\n",
    "- 98.6% of potato chip products are over the recommended daily intake of saturated fat(100 g)\n",
    "- All potato chip products contain additives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Beef Jerky**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4_beefjerky = df4[df4.product_name=='Beef Jerky'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>brands</th>\n",
       "      <th>countries</th>\n",
       "      <th>ingredients_text</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>additives</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>nutrition_grade_fr</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>avg_nutrition_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>5120</td>\n",
       "      <td>Beef Jerky</td>\n",
       "      <td>Roundy's</td>\n",
       "      <td>United States</td>\n",
       "      <td>Beef, water, sugar, salt, maltodextrin, vinega...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>[ beef -&gt; en:beef  ]  [ water -&gt; en:water  ] ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>1197.0</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21.43</td>\n",
       "      <td>21.43</td>\n",
       "      <td>3.6</td>\n",
       "      <td>42.86</td>\n",
       "      <td>4.71678</td>\n",
       "      <td>1.857</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5121</td>\n",
       "      <td>Beef Jerky</td>\n",
       "      <td>Roundy's</td>\n",
       "      <td>United States</td>\n",
       "      <td>Beef, sugar, water, salt, maltodextrin, crushe...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[ beef -&gt; en:beef  ]  [ sugar -&gt; en:sugar  ] ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>1197.0</td>\n",
       "      <td>3.57</td>\n",
       "      <td>1.79</td>\n",
       "      <td>21.43</td>\n",
       "      <td>17.86</td>\n",
       "      <td>3.6</td>\n",
       "      <td>39.29</td>\n",
       "      <td>4.98856</td>\n",
       "      <td>1.964</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5122</td>\n",
       "      <td>Beef Jerky</td>\n",
       "      <td>Roundy's</td>\n",
       "      <td>United States</td>\n",
       "      <td>Beef, sugar, teriyaki sauce (soy sauce [water,...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>[ beef -&gt; en:beef  ]  [ sugar -&gt; en:sugar  ] ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>1197.0</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21.43</td>\n",
       "      <td>17.86</td>\n",
       "      <td>3.6</td>\n",
       "      <td>42.86</td>\n",
       "      <td>4.35356</td>\n",
       "      <td>1.714</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10009</td>\n",
       "      <td>Beef Jerky</td>\n",
       "      <td>Rite Aid</td>\n",
       "      <td>United States</td>\n",
       "      <td>Beef, sugar, teriyaki sauce (soy sauce (water,...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[ beef -&gt; en:beef  ]  [ sugar -&gt; en:sugar  ] ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>1197.0</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21.43</td>\n",
       "      <td>17.86</td>\n",
       "      <td>3.6</td>\n",
       "      <td>42.86</td>\n",
       "      <td>4.35356</td>\n",
       "      <td>1.714</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12428</td>\n",
       "      <td>Beef Jerky</td>\n",
       "      <td>Western Family</td>\n",
       "      <td>United States</td>\n",
       "      <td>Beef, water, sugar, brown sugar, soy sauce (wa...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>[ beef -&gt; en:beef  ]  [ water -&gt; en:water  ] ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>1197.0</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.00</td>\n",
       "      <td>17.86</td>\n",
       "      <td>14.29</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.86</td>\n",
       "      <td>3.08356</td>\n",
       "      <td>1.214</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      product_name          brands      countries                                   ingredients_text  additives_n                                          additives  ingredients_from_palm_oil_n nutrition_grade_fr  energy_100g  fat_100g  saturated-fat_100g  carbohydrates_100g  sugars_100g  fiber_100g  proteins_100g  salt_100g  sodium_100g  avg_nutrition_score\n",
       "5120    Beef Jerky        Roundy's  United States  Beef, water, sugar, salt, maltodextrin, vinega...          6.0   [ beef -> en:beef  ]  [ water -> en:water  ] ...                          0.0                  d       1197.0      3.57                0.00               21.43        21.43         3.6          42.86    4.71678        1.857                 12.0\n",
       "5121    Beef Jerky        Roundy's  United States  Beef, sugar, water, salt, maltodextrin, crushe...          3.0   [ beef -> en:beef  ]  [ sugar -> en:sugar  ] ...                          0.0                  d       1197.0      3.57                1.79               21.43        17.86         3.6          39.29    4.98856        1.964                 12.0\n",
       "5122    Beef Jerky        Roundy's  United States  Beef, sugar, teriyaki sauce (soy sauce [water,...          9.0   [ beef -> en:beef  ]  [ sugar -> en:sugar  ] ...                          0.0                  d       1197.0      3.57                0.00               21.43        17.86         3.6          42.86    4.35356        1.714                 11.0\n",
       "10009   Beef Jerky        Rite Aid  United States  Beef, sugar, teriyaki sauce (soy sauce (water,...          3.0   [ beef -> en:beef  ]  [ sugar -> en:sugar  ] ...                          0.0                  d       1197.0      3.57                0.00               21.43        17.86         3.6          42.86    4.35356        1.714                 11.0\n",
       "12428   Beef Jerky  Western Family  United States  Beef, water, sugar, brown sugar, soy sauce (wa...          2.0   [ beef -> en:beef  ]  [ water -> en:water  ] ...                          0.0                  d       1197.0      3.57                0.00               17.86        14.29         0.0          42.86    3.08356        1.214                 16.0"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_beefjerky.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16.163636363636364"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_beefjerky.avg_nutrition_score.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "157"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_beefjerky.sugars_100g > .36).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "94.01197604790418"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(157/167)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "72"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_beefjerky['saturated-fat_100g']> .13).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43.11377245508982"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(72/167) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "166"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_beefjerky['additives'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99.40119760479041"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(166/167)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Beef jerky nutrition facts summary:**\n",
    "- Average nutrition score: 16.2\n",
    "- 94% of beef jerky products are over the recommended daily intake of sugar (36 g)\n",
    "- 43% of beef jerky products are over the recommended daily intake of saturated fat(100 g)\n",
    "- Only one of the 167 beef jerky products don't contain additives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Pinto Beans**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4_pintobeans = df4[df4.product_name=='Pinto Beans'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>brands</th>\n",
       "      <th>countries</th>\n",
       "      <th>ingredients_text</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>additives</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>nutrition_grade_fr</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>avg_nutrition_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3042</td>\n",
       "      <td>Pinto Beans</td>\n",
       "      <td>Kroger</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ingredients: prepared pinto beans, water, salt...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[ ingredients -&gt; en:ingredients  ]  [ prepare...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>a</td>\n",
       "      <td>289.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.38</td>\n",
       "      <td>0.77</td>\n",
       "      <td>5.4</td>\n",
       "      <td>4.62</td>\n",
       "      <td>0.80010</td>\n",
       "      <td>0.315</td>\n",
       "      <td>-4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3863</td>\n",
       "      <td>Pinto Beans</td>\n",
       "      <td>Kroger</td>\n",
       "      <td>United States</td>\n",
       "      <td>Pinto beans.</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ pinto-beans -&gt; en:pinto-beans  ]  [ beans -...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>a</td>\n",
       "      <td>1075.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57.14</td>\n",
       "      <td>2.86</td>\n",
       "      <td>14.3</td>\n",
       "      <td>20.00</td>\n",
       "      <td>0.03556</td>\n",
       "      <td>0.014</td>\n",
       "      <td>-7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4092</td>\n",
       "      <td>Pinto Beans</td>\n",
       "      <td>Kroger</td>\n",
       "      <td>United States</td>\n",
       "      <td>Pinto beans.</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ pinto-beans -&gt; en:pinto-beans  ]  [ beans -...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>a</td>\n",
       "      <td>1075.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57.14</td>\n",
       "      <td>2.86</td>\n",
       "      <td>14.3</td>\n",
       "      <td>20.00</td>\n",
       "      <td>0.03556</td>\n",
       "      <td>0.014</td>\n",
       "      <td>-7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4093</td>\n",
       "      <td>Pinto Beans</td>\n",
       "      <td>Kroger</td>\n",
       "      <td>United States</td>\n",
       "      <td>Pinto beans.</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ pinto-beans -&gt; en:pinto-beans  ]  [ beans -...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>a</td>\n",
       "      <td>1075.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57.14</td>\n",
       "      <td>2.86</td>\n",
       "      <td>14.3</td>\n",
       "      <td>20.00</td>\n",
       "      <td>0.03556</td>\n",
       "      <td>0.014</td>\n",
       "      <td>-7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5226</td>\n",
       "      <td>Pinto Beans</td>\n",
       "      <td>Roundys</td>\n",
       "      <td>United States</td>\n",
       "      <td>Prepared pinto beans, water, salt, calcium chl...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[ prepared-pinto-beans -&gt; en:prepared-pinto-b...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>a</td>\n",
       "      <td>322.0</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.62</td>\n",
       "      <td>0.77</td>\n",
       "      <td>3.1</td>\n",
       "      <td>3.85</td>\n",
       "      <td>0.68326</td>\n",
       "      <td>0.269</td>\n",
       "      <td>-4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     product_name   brands      countries                                   ingredients_text  additives_n                                          additives  ingredients_from_palm_oil_n nutrition_grade_fr  energy_100g  fat_100g  saturated-fat_100g  carbohydrates_100g  sugars_100g  fiber_100g  proteins_100g  salt_100g  sodium_100g  avg_nutrition_score\n",
       "3042  Pinto Beans   Kroger  United States  Ingredients: prepared pinto beans, water, salt...          1.0   [ ingredients -> en:ingredients  ]  [ prepare...                          0.0                  a        289.0      0.00                 0.0               15.38         0.77         5.4           4.62    0.80010        0.315                 -4.0\n",
       "3863  Pinto Beans   Kroger  United States                                       Pinto beans.          0.0   [ pinto-beans -> en:pinto-beans  ]  [ beans -...                          0.0                  a       1075.0      0.00                 0.0               57.14         2.86        14.3          20.00    0.03556        0.014                 -7.0\n",
       "4092  Pinto Beans   Kroger  United States                                       Pinto beans.          0.0   [ pinto-beans -> en:pinto-beans  ]  [ beans -...                          0.0                  a       1075.0      0.00                 0.0               57.14         2.86        14.3          20.00    0.03556        0.014                 -7.0\n",
       "4093  Pinto Beans   Kroger  United States                                       Pinto beans.          0.0   [ pinto-beans -> en:pinto-beans  ]  [ beans -...                          0.0                  a       1075.0      0.00                 0.0               57.14         2.86        14.3          20.00    0.03556        0.014                 -7.0\n",
       "5226  Pinto Beans  Roundys  United States  Prepared pinto beans, water, salt, calcium chl...          1.0   [ prepared-pinto-beans -> en:prepared-pinto-b...                          0.0                  a        322.0      0.38                 0.0               14.62         0.77         3.1           3.85    0.68326        0.269                 -4.0"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_pintobeans.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-5.3875"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_pintobeans.avg_nutrition_score.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "137"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_pintobeans.sugars_100g > .36).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "84.5679012345679"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(137/162)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_pintobeans['saturated-fat_100g']> .13).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6172839506172839"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1/162) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "162"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_pintobeans['additives'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.0"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(162/162)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Pinto beans nutrition facts summary:**\n",
    "- Average nutrition score: -5.4\n",
    "- 84.7% of pinto bean products are over the recommended daily intake of sugar (36 g)\n",
    "- Only one of 162 pinto bean products is over the recommended daily intake of saturated fat(100 g)\n",
    "- All pinto bean products contain additives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Popcorn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4_popcorn = df4[df4.product_name=='Popcorn'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>brands</th>\n",
       "      <th>countries</th>\n",
       "      <th>ingredients_text</th>\n",
       "      <th>additives_n</th>\n",
       "      <th>additives</th>\n",
       "      <th>ingredients_from_palm_oil_n</th>\n",
       "      <th>nutrition_grade_fr</th>\n",
       "      <th>energy_100g</th>\n",
       "      <th>fat_100g</th>\n",
       "      <th>saturated-fat_100g</th>\n",
       "      <th>carbohydrates_100g</th>\n",
       "      <th>sugars_100g</th>\n",
       "      <th>fiber_100g</th>\n",
       "      <th>proteins_100g</th>\n",
       "      <th>salt_100g</th>\n",
       "      <th>sodium_100g</th>\n",
       "      <th>avg_nutrition_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1622</td>\n",
       "      <td>Popcorn</td>\n",
       "      <td>Front Range Snacks  Inc.</td>\n",
       "      <td>United States</td>\n",
       "      <td>Popcorn, canola, oil, vinegar powder (ip malto...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ popcorn -&gt; en:popcorn  ]  [ canola -&gt; en:ca...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>c</td>\n",
       "      <td>2389.0</td>\n",
       "      <td>42.86</td>\n",
       "      <td>3.57</td>\n",
       "      <td>42.86</td>\n",
       "      <td>3.57</td>\n",
       "      <td>7.1</td>\n",
       "      <td>7.14</td>\n",
       "      <td>0.45466</td>\n",
       "      <td>0.179</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4692</td>\n",
       "      <td>Popcorn</td>\n",
       "      <td>Kroger</td>\n",
       "      <td>United States</td>\n",
       "      <td>Popcorn, sugar, vegetable oil ( sunflower, saf...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[ popcorn -&gt; en:popcorn  ]  [ sugar -&gt; en:sug...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>1941.0</td>\n",
       "      <td>21.43</td>\n",
       "      <td>3.57</td>\n",
       "      <td>67.86</td>\n",
       "      <td>32.14</td>\n",
       "      <td>7.1</td>\n",
       "      <td>7.14</td>\n",
       "      <td>1.17856</td>\n",
       "      <td>0.464</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6982</td>\n",
       "      <td>Popcorn</td>\n",
       "      <td>Shurfine</td>\n",
       "      <td>United States</td>\n",
       "      <td>Popcorn, sunflower oil and/or corn oil, chedda...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[ popcorn -&gt; en:popcorn  ]  [ sunflower-oil-a...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>e</td>\n",
       "      <td>2540.0</td>\n",
       "      <td>46.43</td>\n",
       "      <td>7.14</td>\n",
       "      <td>35.71</td>\n",
       "      <td>3.57</td>\n",
       "      <td>7.1</td>\n",
       "      <td>7.14</td>\n",
       "      <td>2.35966</td>\n",
       "      <td>0.929</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6983</td>\n",
       "      <td>Popcorn</td>\n",
       "      <td>Shurfine</td>\n",
       "      <td>United States</td>\n",
       "      <td>Popcorn, corn oil and/or sunflower oil, white ...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[ popcorn -&gt; en:popcorn  ]  [ corn-oil-and-or...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>d</td>\n",
       "      <td>2243.0</td>\n",
       "      <td>35.71</td>\n",
       "      <td>5.36</td>\n",
       "      <td>46.43</td>\n",
       "      <td>10.71</td>\n",
       "      <td>7.1</td>\n",
       "      <td>10.71</td>\n",
       "      <td>2.99466</td>\n",
       "      <td>1.179</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7088</td>\n",
       "      <td>Popcorn</td>\n",
       "      <td>Topco Associates  Inc.</td>\n",
       "      <td>United States</td>\n",
       "      <td>Caramel corn (brown sugar, corn syrup, popcorn...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[ caramel-corn -&gt; en:caramel-corn  ]  [ corn ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>e</td>\n",
       "      <td>2092.0</td>\n",
       "      <td>25.00</td>\n",
       "      <td>7.14</td>\n",
       "      <td>67.86</td>\n",
       "      <td>32.14</td>\n",
       "      <td>3.6</td>\n",
       "      <td>3.57</td>\n",
       "      <td>1.72466</td>\n",
       "      <td>0.679</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     product_name                    brands      countries                                   ingredients_text  additives_n                                          additives  ingredients_from_palm_oil_n nutrition_grade_fr  energy_100g  fat_100g  saturated-fat_100g  carbohydrates_100g  sugars_100g  fiber_100g  proteins_100g  salt_100g  sodium_100g  avg_nutrition_score\n",
       "1622      Popcorn  Front Range Snacks  Inc.  United States  Popcorn, canola, oil, vinegar powder (ip malto...          0.0   [ popcorn -> en:popcorn  ]  [ canola -> en:ca...                          0.0                  c       2389.0     42.86                3.57               42.86         3.57         7.1           7.14    0.45466        0.179                  6.0\n",
       "4692      Popcorn                    Kroger  United States  Popcorn, sugar, vegetable oil ( sunflower, saf...          0.0   [ popcorn -> en:popcorn  ]  [ sugar -> en:sug...                          0.0                  d       1941.0     21.43                3.57               67.86        32.14         7.1           7.14    1.17856        0.464                 15.0\n",
       "6982      Popcorn                  Shurfine  United States  Popcorn, sunflower oil and/or corn oil, chedda...          4.0   [ popcorn -> en:popcorn  ]  [ sunflower-oil-a...                          0.0                  e       2540.0     46.43                7.14               35.71         3.57         7.1           7.14    2.35966        0.929                 19.0\n",
       "6983      Popcorn                  Shurfine  United States  Popcorn, corn oil and/or sunflower oil, white ...          3.0   [ popcorn -> en:popcorn  ]  [ corn-oil-and-or...                          0.0                  d       2243.0     35.71                5.36               46.43        10.71         7.1          10.71    2.99466        1.179                 18.0\n",
       "7088      Popcorn    Topco Associates  Inc.  United States  Caramel corn (brown sugar, corn syrup, popcorn...          1.0   [ caramel-corn -> en:caramel-corn  ]  [ corn ...                          0.0                  e       2092.0     25.00                7.14               67.86        32.14         3.6           3.57    1.72466        0.679                 22.0"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_popcorn.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.068027210884354"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_popcorn.avg_nutrition_score.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "88"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_popcorn.sugars_100g > .36).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21f414818c8>"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df4_popcorn.sugars_100g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55.34591194968554"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(88/159)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "139"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df4_popcorn['saturated-fat_100g']> .13).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "87.42138364779875"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(139/159) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "153"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4_popcorn['additives'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "96.22641509433963"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(153/159)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Popcorn nutrition facts summary:**\n",
    "- Average nutrition score: 14.1\n",
    "- 55.3% of popcorn products are over the recommended daily intake of sugar (36 g)\n",
    "- 87.4% of popcorn products are over the recommended daily intake of saturated fat(100 g)\n",
    "- 96.2% popcorn products contain additives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **US food demand, based on the top five products:**\n",
    "<ol>\n",
    "    <li> Additives: <br> US consumers like products that contain additives. Almost products of the most popular food items contained additives.</li>\n",
    "    <li> Saturated fat: <br> US consumers mostly like products that contain high levels of saturated fat that is over the daily recommended fat intake.  </li>\n",
    "<li>Saturated fat: <br>US consumers mostly like products that contain high levels of saturated fat that is over the daily recommended fat intake.</li>  \n",
    "<li>Sugar: <br> US Consumers like products that contain high levels of sugar that is over the daily recommended fat intake. </li>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\"> RECOMMENDATION: <br> For companies that want to enter the US food market, it is recommended to produce foods that are: <br>\n",
    "    <li> High in sugar </li>\n",
    "    <li> High in saturated fat </li> \n",
    "    <li> Can contain additives because Americans have low sensitivity to food additives </li> \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Distribution of products among top brands:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "us_brands = us['brands'].groupby(us.brands).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_us_brands = us_brands.nlargest(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brands\n",
       "Meijer      1995\n",
       "Kroger      1659\n",
       "Ahold       1370\n",
       "Spartan     1341\n",
       "Roundy's    1299\n",
       "Name: brands, dtype: int64"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_us_brands"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brands\n",
       "Meijer      0.070256\n",
       "Kroger      0.058424\n",
       "Ahold       0.048246\n",
       "Spartan     0.047225\n",
       "Roundy's    0.045746\n",
       "Name: brands, dtype: float64"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_us_brands / len(us.brands.unique()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21f602416c8>"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#US food retail industry:\n",
    "top_us_brands.plot(kind = 'pie',\\\n",
    "figsize = (5,5), autopct = '%1.1f%%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pie chart shows the distribution of US products by the top five brands.\n",
    "The distribution seems fairly equal, with the food retail industry dominated by mostly five brands. <br>\n",
    "The top food producer is Meijer while Roundy's is the smallest relatively. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The spread of the distribution between the biggest and smallest food brands:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Notes on above analysis:\n",
    "\n",
    "### companies with more variety in products tend to have:\n",
    "\n",
    "- more additives\n",
    "\n",
    "- less energy\n",
    "\n",
    "- less fat\n",
    "\n",
    "- less sugar\n",
    "\n",
    "- 2x less sodium\n",
    "\n",
    "- significantly lower nutrition score\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Therefore:\n",
    "\n",
    "- Brands optimizing for healthy products may be more successful if they focus on lower variety and higher quality"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
